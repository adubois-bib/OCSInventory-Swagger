# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IpdiscoverNetdevicesInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: datetime=None, hardware_id: int=None, ip: str=None, mac: str=None, mask: str=None, name: str=None, netid: str=None, tag: str=None):  # noqa: E501
        """IpdiscoverNetdevicesInner - a model defined in Swagger

        :param _date: The _date of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type _date: datetime
        :param hardware_id: The hardware_id of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type hardware_id: int
        :param ip: The ip of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type ip: str
        :param mac: The mac of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type mac: str
        :param mask: The mask of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type mask: str
        :param name: The name of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type name: str
        :param netid: The netid of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type netid: str
        :param tag: The tag of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type tag: str
        """
        self.swagger_types = {
            '_date': datetime,
            'hardware_id': int,
            'ip': str,
            'mac': str,
            'mask': str,
            'name': str,
            'netid': str,
            'tag': str
        }

        self.attribute_map = {
            '_date': 'DATE',
            'hardware_id': 'HARDWARE_ID',
            'ip': 'IP',
            'mac': 'MAC',
            'mask': 'MASK',
            'name': 'NAME',
            'netid': 'NETID',
            'tag': 'TAG'
        }
        self.__date = _date
        self._hardware_id = hardware_id
        self._ip = ip
        self._mac = mac
        self._mask = mask
        self._name = name
        self._netid = netid
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'IpdiscoverNetdevicesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ipdiscoverNetdevices_inner of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: IpdiscoverNetdevicesInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> datetime:
        """Gets the _date of this IpdiscoverNetdevicesInner.


        :return: The _date of this IpdiscoverNetdevicesInner.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this IpdiscoverNetdevicesInner.


        :param _date: The _date of this IpdiscoverNetdevicesInner.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def hardware_id(self) -> int:
        """Gets the hardware_id of this IpdiscoverNetdevicesInner.


        :return: The hardware_id of this IpdiscoverNetdevicesInner.
        :rtype: int
        """
        return self._hardware_id

    @hardware_id.setter
    def hardware_id(self, hardware_id: int):
        """Sets the hardware_id of this IpdiscoverNetdevicesInner.


        :param hardware_id: The hardware_id of this IpdiscoverNetdevicesInner.
        :type hardware_id: int
        """

        self._hardware_id = hardware_id

    @property
    def ip(self) -> str:
        """Gets the ip of this IpdiscoverNetdevicesInner.


        :return: The ip of this IpdiscoverNetdevicesInner.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this IpdiscoverNetdevicesInner.


        :param ip: The ip of this IpdiscoverNetdevicesInner.
        :type ip: str
        """

        self._ip = ip

    @property
    def mac(self) -> str:
        """Gets the mac of this IpdiscoverNetdevicesInner.


        :return: The mac of this IpdiscoverNetdevicesInner.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac: str):
        """Sets the mac of this IpdiscoverNetdevicesInner.


        :param mac: The mac of this IpdiscoverNetdevicesInner.
        :type mac: str
        """

        self._mac = mac

    @property
    def mask(self) -> str:
        """Gets the mask of this IpdiscoverNetdevicesInner.


        :return: The mask of this IpdiscoverNetdevicesInner.
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask: str):
        """Sets the mask of this IpdiscoverNetdevicesInner.


        :param mask: The mask of this IpdiscoverNetdevicesInner.
        :type mask: str
        """

        self._mask = mask

    @property
    def name(self) -> str:
        """Gets the name of this IpdiscoverNetdevicesInner.


        :return: The name of this IpdiscoverNetdevicesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IpdiscoverNetdevicesInner.


        :param name: The name of this IpdiscoverNetdevicesInner.
        :type name: str
        """

        self._name = name

    @property
    def netid(self) -> str:
        """Gets the netid of this IpdiscoverNetdevicesInner.


        :return: The netid of this IpdiscoverNetdevicesInner.
        :rtype: str
        """
        return self._netid

    @netid.setter
    def netid(self, netid: str):
        """Sets the netid of this IpdiscoverNetdevicesInner.


        :param netid: The netid of this IpdiscoverNetdevicesInner.
        :type netid: str
        """

        self._netid = netid

    @property
    def tag(self) -> str:
        """Gets the tag of this IpdiscoverNetdevicesInner.


        :return: The tag of this IpdiscoverNetdevicesInner.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag: str):
        """Sets the tag of this IpdiscoverNetdevicesInner.


        :param tag: The tag of this IpdiscoverNetdevicesInner.
        :type tag: str
        """

        self._tag = tag
