/*
 * OCS Inventory Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Get a computer by its ID
        /// </summary>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/computer/{id}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ComputerIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ComputersList), description: "OK")]
        public virtual IActionResult ComputerIdGet([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ComputersList));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"{computer_id}\" : {\n    \"accountinfo\" : [ {\n      \"HARDWARE_ID\" : 16,\n      \"TAG\" : \"DEV-MACHINE\"\n    }, {\n      \"HARDWARE_ID\" : 16,\n      \"TAG\" : \"DEV-MACHINE\"\n    } ],\n    \"batteries\" : [ \"batteries\", \"batteries\" ],\n    \"bios\" : [ {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    }, {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    } ]\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ComputersList>(exampleJson)
                        : default(ComputersList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get sections informations of a specific computer
        /// </summary>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section.</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/computer/{id}/{sections}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ComputerIdSectionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ComputerDetail), description: "OK")]
        public virtual IActionResult ComputerIdSectionsGet([FromRoute][Required]int? id, [FromRoute][Required]string sections, [FromQuery]string where, [FromQuery]string _operator)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ComputerDetail));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"{computer_id}\" : {\n    \"bios\" : [ {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    }, {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    } ]\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ComputerDetail>(exampleJson)
                        : default(ComputerDetail);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a list of computers with its detail
        /// </summary>
        /// <param name="start">Start offset of the query</param>
        /// <param name="limit">Limit offset of the query</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/computers")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ComputersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ComputersList>), description: "OK")]
        public virtual IActionResult ComputersGet([FromQuery]int? start, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ComputersList>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"{computer_id}\" : {\n    \"accountinfo\" : [ {\n      \"HARDWARE_ID\" : 16,\n      \"TAG\" : \"DEV-MACHINE\"\n    }, {\n      \"HARDWARE_ID\" : 16,\n      \"TAG\" : \"DEV-MACHINE\"\n    } ],\n    \"batteries\" : [ \"batteries\", \"batteries\" ],\n    \"bios\" : [ {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    }, {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    } ]\n  }\n}, {\n  \"{computer_id}\" : {\n    \"accountinfo\" : [ {\n      \"HARDWARE_ID\" : 16,\n      \"TAG\" : \"DEV-MACHINE\"\n    }, {\n      \"HARDWARE_ID\" : 16,\n      \"TAG\" : \"DEV-MACHINE\"\n    } ],\n    \"batteries\" : [ \"batteries\", \"batteries\" ],\n    \"bios\" : [ {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    }, {\n      \"BDATE\" : \"04/16/2021\",\n      \"HARDWARE_ID\" : 16,\n      \"SMODEL\" : \"PowerEdge R340\",\n      \"BMANUFACTURER\" : \"Dell Inc.\",\n      \"BVERSION\" : \"2.5.1\",\n      \"MMANUFACTURER\" : \"Dell Inc.\",\n      \"MSN\" : \"\",\n      \"MMODEL\" : \"045M96\",\n      \"SMANUFACTURER\" : \"\",\n      \"ASSETTAG\" : \"\",\n      \"TYPE\" : \"Rack Mount Chassis\",\n      \"SSN\" : \"\"\n    } ]\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ComputersList>>(exampleJson)
                        : default(List<ComputersList>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a ID list of computers update during the provided timestamp
        /// </summary>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/computers/lastupdate/{timestamp}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ComputersLastupdateTimestampGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ListOfID>), description: "OK")]
        public virtual IActionResult ComputersLastupdateTimestampGet([FromRoute][Required]int? timestamp)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ListOfID>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ID\" : 1942\n}, {\n  \"ID\" : 1942\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ListOfID>>(exampleJson)
                        : default(List<ListOfID>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a ID list of all computers in the OCS database
        /// </summary>
        /// <param name="start">Start offset of the query</param>
        /// <param name="limit">Limit offset of the query</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/computers/listID")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ComputersListIDGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ListOfID>), description: "OK")]
        public virtual IActionResult ComputersListIDGet([FromQuery]int? start, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ListOfID>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ID\" : 1942\n}, {\n  \"ID\" : 1942\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ListOfID>>(exampleJson)
                        : default(List<ListOfID>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List IPDiscover network list
        /// </summary>
        /// <param name="start">Start offset of the query</param>
        /// <param name="limit">Limit offset of the query</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/ipdiscover")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IpdiscoverGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IpdiscoverList), description: "OK")]
        public virtual IActionResult IpdiscoverGet([FromQuery]int? start, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IpdiscoverList));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"NETID\" : \"172.18.25.0\"\n}, {\n  \"NETID\" : \"172.18.25.0\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IpdiscoverList>(exampleJson)
                        : default(IpdiscoverList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get list of network devices scanned on one network
        /// </summary>
        /// <param name="netid">Start offset of the query</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/ipdiscover/network/{netid}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IpdiscoverNetworkNetidGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IpdiscoverNetdevices), description: "OK")]
        public virtual IActionResult IpdiscoverNetworkNetidGet([FromRoute][Required]int? netid)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IpdiscoverNetdevices));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"DATE\" : \"2023-06-08T12:15:08Z\",\n  \"HARDWARE_ID\" : 16,\n  \"NETID\" : \"172.18.25.0\",\n  \"IP\" : \"172.18.25.254\",\n  \"TAG\" : \"DEV-MACHINE\",\n  \"MAC\" : \"00:0d:b9:51:fc:aa\",\n  \"MASK\" : \"255.255.255.0\",\n  \"NAME\" : \"-\"\n}, {\n  \"DATE\" : \"2023-06-08T12:15:08Z\",\n  \"HARDWARE_ID\" : 16,\n  \"NETID\" : \"172.18.25.0\",\n  \"IP\" : \"172.18.25.254\",\n  \"TAG\" : \"DEV-MACHINE\",\n  \"MAC\" : \"00:0d:b9:51:fc:aa\",\n  \"MASK\" : \"255.255.255.0\",\n  \"NAME\" : \"-\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IpdiscoverNetdevices>(exampleJson)
                        : default(IpdiscoverNetdevices);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get snmp device list of a specific snmp type
        /// </summary>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query</param>
        /// <param name="limit">Limit offset of the query</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/snmp/{snmp_type}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SnmpSnmpTypeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SNMPDetail), description: "OK")]
        public virtual IActionResult SnmpSnmpTypeGet([FromRoute][Required]string snmpType, [FromQuery]int? start, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SNMPDetail));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"DefaultAddressIP\" : \"127.0.0.1\",\n  \"DefaultDescription\" : \"This is a description\",\n  \"LASTDATE\" : \"2023-06-08T12:22:18Z\",\n  \"DefaultUptime\" : \"DefaultUptime\",\n  \"DefaultGateway\" : \"172.18.25.254\",\n  \"DefaultName\" : \"My Equipment\",\n  \"DefaultMacAddress\" : \"DefaultMacAddress\",\n  \"ID\" : 1,\n  \"DefaultLocation\" : \"Here\"\n}, {\n  \"DefaultAddressIP\" : \"127.0.0.1\",\n  \"DefaultDescription\" : \"This is a description\",\n  \"LASTDATE\" : \"2023-06-08T12:22:18Z\",\n  \"DefaultUptime\" : \"DefaultUptime\",\n  \"DefaultGateway\" : \"172.18.25.254\",\n  \"DefaultName\" : \"My Equipment\",\n  \"DefaultMacAddress\" : \"DefaultMacAddress\",\n  \"ID\" : 1,\n  \"DefaultLocation\" : \"Here\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SNMPDetail>(exampleJson)
                        : default(SNMPDetail);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a device from a snmp type with its ID
        /// </summary>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/snmp/{snmp_type}/{id}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SnmpSnmpTypeIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SNMPDetail), description: "OK")]
        public virtual IActionResult SnmpSnmpTypeIdGet([FromRoute][Required]string snmpType, [FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SNMPDetail));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"DefaultAddressIP\" : \"127.0.0.1\",\n  \"DefaultDescription\" : \"This is a description\",\n  \"LASTDATE\" : \"2023-06-08T12:22:18Z\",\n  \"DefaultUptime\" : \"DefaultUptime\",\n  \"DefaultGateway\" : \"172.18.25.254\",\n  \"DefaultName\" : \"My Equipment\",\n  \"DefaultMacAddress\" : \"DefaultMacAddress\",\n  \"ID\" : 1,\n  \"DefaultLocation\" : \"Here\"\n}, {\n  \"DefaultAddressIP\" : \"127.0.0.1\",\n  \"DefaultDescription\" : \"This is a description\",\n  \"LASTDATE\" : \"2023-06-08T12:22:18Z\",\n  \"DefaultUptime\" : \"DefaultUptime\",\n  \"DefaultGateway\" : \"172.18.25.254\",\n  \"DefaultName\" : \"My Equipment\",\n  \"DefaultMacAddress\" : \"DefaultMacAddress\",\n  \"ID\" : 1,\n  \"DefaultLocation\" : \"Here\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SNMPDetail>(exampleJson)
                        : default(SNMPDetail);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a SNMP type list
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/snmps/typeList")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SnmpsTypeListGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SNMPType), description: "OK")]
        public virtual IActionResult SnmpsTypeListGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SNMPType));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"TABLE_TYPE_NAME\" : \"snmp_default\",\n  \"ID\" : 13,\n  \"TYPE_NAME\" : \"Default\"\n}, {\n  \"TABLE_TYPE_NAME\" : \"snmp_default\",\n  \"ID\" : 13,\n  \"TYPE_NAME\" : \"Default\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SNMPType>(exampleJson)
                        : default(SNMPType);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get software list from database
        /// </summary>
        /// <param name="start">Start offset of the query</param>
        /// <param name="limit">Limit offset of the query</param>
        /// <param name="soft">Name of the software you want to search (optional)</param>
        /// <response code="200">OK</response>
        /// <response code="401">Authentication information is missing or invalid</response>
        [HttpGet]
        [Route("/ocsapi/v1/softwares")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SoftwaresGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SoftwaresList), description: "OK")]
        public virtual IActionResult SoftwaresGet([FromQuery]int? start, [FromQuery]int? limit, [FromQuery]string soft)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SoftwaresList));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"PUBLISHER\" : \"Igor Pavlov\",\n  \"VERSION\" : \"16.02\",\n  \"NAME\" : \"7-Zip 16.02\"\n}, {\n  \"PUBLISHER\" : \"Igor Pavlov\",\n  \"VERSION\" : \"16.02\",\n  \"NAME\" : \"7-Zip 16.02\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SoftwaresList>(exampleJson)
                        : default(SoftwaresList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
