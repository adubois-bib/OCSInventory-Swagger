/*
 * OCS Inventory Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SoftwaresListInner : IEquatable<SoftwaresListInner>
    { 
        /// <summary>
        /// Gets or Sets NAME
        /// </summary>

        [DataMember(Name="NAME")]
        public string NAME { get; set; }

        /// <summary>
        /// Gets or Sets PUBLISHER
        /// </summary>

        [DataMember(Name="PUBLISHER")]
        public string PUBLISHER { get; set; }

        /// <summary>
        /// Gets or Sets VERSION
        /// </summary>

        [DataMember(Name="VERSION")]
        public string VERSION { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftwaresListInner {\n");
            sb.Append("  NAME: ").Append(NAME).Append("\n");
            sb.Append("  PUBLISHER: ").Append(PUBLISHER).Append("\n");
            sb.Append("  VERSION: ").Append(VERSION).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SoftwaresListInner)obj);
        }

        /// <summary>
        /// Returns true if SoftwaresListInner instances are equal
        /// </summary>
        /// <param name="other">Instance of SoftwaresListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwaresListInner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NAME == other.NAME ||
                    NAME != null &&
                    NAME.Equals(other.NAME)
                ) && 
                (
                    PUBLISHER == other.PUBLISHER ||
                    PUBLISHER != null &&
                    PUBLISHER.Equals(other.PUBLISHER)
                ) && 
                (
                    VERSION == other.VERSION ||
                    VERSION != null &&
                    VERSION.Equals(other.VERSION)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NAME != null)
                    hashCode = hashCode * 59 + NAME.GetHashCode();
                    if (PUBLISHER != null)
                    hashCode = hashCode * 59 + PUBLISHER.GetHashCode();
                    if (VERSION != null)
                    hashCode = hashCode * 59 + VERSION.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SoftwaresListInner left, SoftwaresListInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SoftwaresListInner left, SoftwaresListInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
