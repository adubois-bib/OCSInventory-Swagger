/*
 * OCS Inventory Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComputersListComputerIdBios : IEquatable<ComputersListComputerIdBios>
    { 
        /// <summary>
        /// Gets or Sets ASSETTAG
        /// </summary>

        [DataMember(Name="ASSETTAG")]
        public string ASSETTAG { get; set; }

        /// <summary>
        /// Gets or Sets BDATE
        /// </summary>

        [DataMember(Name="BDATE")]
        public string BDATE { get; set; }

        /// <summary>
        /// Gets or Sets BMANUFACTURER
        /// </summary>

        [DataMember(Name="BMANUFACTURER")]
        public string BMANUFACTURER { get; set; }

        /// <summary>
        /// Gets or Sets BVERSION
        /// </summary>

        [DataMember(Name="BVERSION")]
        public string BVERSION { get; set; }

        /// <summary>
        /// Gets or Sets HARDWARE_ID
        /// </summary>

        [DataMember(Name="HARDWARE_ID")]
        public int? HARDWARE_ID { get; set; }

        /// <summary>
        /// Gets or Sets MMANUFACTURER
        /// </summary>

        [DataMember(Name="MMANUFACTURER")]
        public string MMANUFACTURER { get; set; }

        /// <summary>
        /// Gets or Sets MMODEL
        /// </summary>

        [DataMember(Name="MMODEL")]
        public string MMODEL { get; set; }

        /// <summary>
        /// Gets or Sets MSN
        /// </summary>

        [DataMember(Name="MSN")]
        public string MSN { get; set; }

        /// <summary>
        /// Gets or Sets SMANUFACTURER
        /// </summary>

        [DataMember(Name="SMANUFACTURER")]
        public string SMANUFACTURER { get; set; }

        /// <summary>
        /// Gets or Sets SMODEL
        /// </summary>

        [DataMember(Name="SMODEL")]
        public string SMODEL { get; set; }

        /// <summary>
        /// Gets or Sets SSN
        /// </summary>

        [DataMember(Name="SSN")]
        public string SSN { get; set; }

        /// <summary>
        /// Gets or Sets TYPE
        /// </summary>

        [DataMember(Name="TYPE")]
        public string TYPE { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComputersListComputerIdBios {\n");
            sb.Append("  ASSETTAG: ").Append(ASSETTAG).Append("\n");
            sb.Append("  BDATE: ").Append(BDATE).Append("\n");
            sb.Append("  BMANUFACTURER: ").Append(BMANUFACTURER).Append("\n");
            sb.Append("  BVERSION: ").Append(BVERSION).Append("\n");
            sb.Append("  HARDWARE_ID: ").Append(HARDWARE_ID).Append("\n");
            sb.Append("  MMANUFACTURER: ").Append(MMANUFACTURER).Append("\n");
            sb.Append("  MMODEL: ").Append(MMODEL).Append("\n");
            sb.Append("  MSN: ").Append(MSN).Append("\n");
            sb.Append("  SMANUFACTURER: ").Append(SMANUFACTURER).Append("\n");
            sb.Append("  SMODEL: ").Append(SMODEL).Append("\n");
            sb.Append("  SSN: ").Append(SSN).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComputersListComputerIdBios)obj);
        }

        /// <summary>
        /// Returns true if ComputersListComputerIdBios instances are equal
        /// </summary>
        /// <param name="other">Instance of ComputersListComputerIdBios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComputersListComputerIdBios other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ASSETTAG == other.ASSETTAG ||
                    ASSETTAG != null &&
                    ASSETTAG.Equals(other.ASSETTAG)
                ) && 
                (
                    BDATE == other.BDATE ||
                    BDATE != null &&
                    BDATE.Equals(other.BDATE)
                ) && 
                (
                    BMANUFACTURER == other.BMANUFACTURER ||
                    BMANUFACTURER != null &&
                    BMANUFACTURER.Equals(other.BMANUFACTURER)
                ) && 
                (
                    BVERSION == other.BVERSION ||
                    BVERSION != null &&
                    BVERSION.Equals(other.BVERSION)
                ) && 
                (
                    HARDWARE_ID == other.HARDWARE_ID ||
                    HARDWARE_ID != null &&
                    HARDWARE_ID.Equals(other.HARDWARE_ID)
                ) && 
                (
                    MMANUFACTURER == other.MMANUFACTURER ||
                    MMANUFACTURER != null &&
                    MMANUFACTURER.Equals(other.MMANUFACTURER)
                ) && 
                (
                    MMODEL == other.MMODEL ||
                    MMODEL != null &&
                    MMODEL.Equals(other.MMODEL)
                ) && 
                (
                    MSN == other.MSN ||
                    MSN != null &&
                    MSN.Equals(other.MSN)
                ) && 
                (
                    SMANUFACTURER == other.SMANUFACTURER ||
                    SMANUFACTURER != null &&
                    SMANUFACTURER.Equals(other.SMANUFACTURER)
                ) && 
                (
                    SMODEL == other.SMODEL ||
                    SMODEL != null &&
                    SMODEL.Equals(other.SMODEL)
                ) && 
                (
                    SSN == other.SSN ||
                    SSN != null &&
                    SSN.Equals(other.SSN)
                ) && 
                (
                    TYPE == other.TYPE ||
                    TYPE != null &&
                    TYPE.Equals(other.TYPE)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ASSETTAG != null)
                    hashCode = hashCode * 59 + ASSETTAG.GetHashCode();
                    if (BDATE != null)
                    hashCode = hashCode * 59 + BDATE.GetHashCode();
                    if (BMANUFACTURER != null)
                    hashCode = hashCode * 59 + BMANUFACTURER.GetHashCode();
                    if (BVERSION != null)
                    hashCode = hashCode * 59 + BVERSION.GetHashCode();
                    if (HARDWARE_ID != null)
                    hashCode = hashCode * 59 + HARDWARE_ID.GetHashCode();
                    if (MMANUFACTURER != null)
                    hashCode = hashCode * 59 + MMANUFACTURER.GetHashCode();
                    if (MMODEL != null)
                    hashCode = hashCode * 59 + MMODEL.GetHashCode();
                    if (MSN != null)
                    hashCode = hashCode * 59 + MSN.GetHashCode();
                    if (SMANUFACTURER != null)
                    hashCode = hashCode * 59 + SMANUFACTURER.GetHashCode();
                    if (SMODEL != null)
                    hashCode = hashCode * 59 + SMODEL.GetHashCode();
                    if (SSN != null)
                    hashCode = hashCode * 59 + SSN.GetHashCode();
                    if (TYPE != null)
                    hashCode = hashCode * 59 + TYPE.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComputersListComputerIdBios left, ComputersListComputerIdBios right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComputersListComputerIdBios left, ComputersListComputerIdBios right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
