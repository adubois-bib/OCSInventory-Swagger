# coding: utf-8

"""
    OCS Inventory Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def computer_id_get(self, id, **kwargs):  # noqa: E501
        """Get a computer by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computer_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the computer in OCS database (required)
        :return: ComputersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.computer_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.computer_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def computer_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a computer by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computer_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the computer in OCS database (required)
        :return: ComputersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method computer_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `computer_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/computer/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def computer_id_sections_get(self, id, sections, **kwargs):  # noqa: E501
        """Get sections informations of a specific computer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computer_id_sections_get(id, sections, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the computer in OCS database (required)
        :param str sections: Name of the requested section (i.e -> bios, software, etc..) (required)
        :param str where: Search on a specific column of the specific section.
        :param str operator: Search operator (like, not like, =, !=, <, >, <=, >=). Mandatory if where parameter is set.
        :return: ComputerDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.computer_id_sections_get_with_http_info(id, sections, **kwargs)  # noqa: E501
        else:
            (data) = self.computer_id_sections_get_with_http_info(id, sections, **kwargs)  # noqa: E501
            return data

    def computer_id_sections_get_with_http_info(self, id, sections, **kwargs):  # noqa: E501
        """Get sections informations of a specific computer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computer_id_sections_get_with_http_info(id, sections, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the computer in OCS database (required)
        :param str sections: Name of the requested section (i.e -> bios, software, etc..) (required)
        :param str where: Search on a specific column of the specific section.
        :param str operator: Search operator (like, not like, =, !=, <, >, <=, >=). Mandatory if where parameter is set.
        :return: ComputerDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sections', 'where', 'operator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method computer_id_sections_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `computer_id_sections_get`")  # noqa: E501
        # verify the required parameter 'sections' is set
        if ('sections' not in params or
                params['sections'] is None):
            raise ValueError("Missing the required parameter `sections` when calling `computer_id_sections_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'sections' in params:
            path_params['sections'] = params['sections']  # noqa: E501

        query_params = []
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'operator' in params:
            query_params.append(('operator', params['operator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/computer/{id}/{sections}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputerDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def computers_get(self, **kwargs):  # noqa: E501
        """Get a list of computers with its detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: list[ComputersList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.computers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.computers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def computers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of computers with its detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: list[ComputersList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method computers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/computers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComputersList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def computers_lastupdate_timestamp_get(self, timestamp, **kwargs):  # noqa: E501
        """Get a ID list of computers update during the provided timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computers_lastupdate_timestamp_get(timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: Timestamp of the number of days to count down from the current date. Optional. (required)
        :return: list[ListOfID]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.computers_lastupdate_timestamp_get_with_http_info(timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.computers_lastupdate_timestamp_get_with_http_info(timestamp, **kwargs)  # noqa: E501
            return data

    def computers_lastupdate_timestamp_get_with_http_info(self, timestamp, **kwargs):  # noqa: E501
        """Get a ID list of computers update during the provided timestamp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computers_lastupdate_timestamp_get_with_http_info(timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: Timestamp of the number of days to count down from the current date. Optional. (required)
        :return: list[ListOfID]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method computers_lastupdate_timestamp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `computers_lastupdate_timestamp_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'timestamp' in params:
            path_params['timestamp'] = params['timestamp']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/computers/lastupdate/{timestamp}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ListOfID]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def computers_list_id_get(self, **kwargs):  # noqa: E501
        """Get a ID list of all computers in the OCS database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computers_list_id_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: list[ListOfID]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.computers_list_id_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.computers_list_id_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def computers_list_id_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a ID list of all computers in the OCS database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.computers_list_id_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: list[ListOfID]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method computers_list_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/computers/listID', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ListOfID]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipdiscover_get(self, **kwargs):  # noqa: E501
        """List IPDiscover network list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipdiscover_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: IpdiscoverList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipdiscover_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ipdiscover_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ipdiscover_get_with_http_info(self, **kwargs):  # noqa: E501
        """List IPDiscover network list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipdiscover_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: IpdiscoverList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipdiscover_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipdiscover', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpdiscoverList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ipdiscover_network_netid_get(self, netid, **kwargs):  # noqa: E501
        """Get list of network devices scanned on one network  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipdiscover_network_netid_get(netid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int netid: Start offset of the query (required)
        :return: IpdiscoverNetdevices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ipdiscover_network_netid_get_with_http_info(netid, **kwargs)  # noqa: E501
        else:
            (data) = self.ipdiscover_network_netid_get_with_http_info(netid, **kwargs)  # noqa: E501
            return data

    def ipdiscover_network_netid_get_with_http_info(self, netid, **kwargs):  # noqa: E501
        """Get list of network devices scanned on one network  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ipdiscover_network_netid_get_with_http_info(netid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int netid: Start offset of the query (required)
        :return: IpdiscoverNetdevices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['netid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ipdiscover_network_netid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'netid' is set
        if ('netid' not in params or
                params['netid'] is None):
            raise ValueError("Missing the required parameter `netid` when calling `ipdiscover_network_netid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'netid' in params:
            path_params['netid'] = params['netid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipdiscover/network/{netid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpdiscoverNetdevices',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snmp_snmp_type_get(self, snmp_type, **kwargs):  # noqa: E501
        """Get snmp device list of a specific snmp type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snmp_snmp_type_get(snmp_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str snmp_type: Name of the snmp type you want to list (required)
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: SNMPDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snmp_snmp_type_get_with_http_info(snmp_type, **kwargs)  # noqa: E501
        else:
            (data) = self.snmp_snmp_type_get_with_http_info(snmp_type, **kwargs)  # noqa: E501
            return data

    def snmp_snmp_type_get_with_http_info(self, snmp_type, **kwargs):  # noqa: E501
        """Get snmp device list of a specific snmp type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snmp_snmp_type_get_with_http_info(snmp_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str snmp_type: Name of the snmp type you want to list (required)
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :return: SNMPDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snmp_type', 'start', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snmp_snmp_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'snmp_type' is set
        if ('snmp_type' not in params or
                params['snmp_type'] is None):
            raise ValueError("Missing the required parameter `snmp_type` when calling `snmp_snmp_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'snmp_type' in params:
            path_params['snmp_type'] = params['snmp_type']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/snmp/{snmp_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SNMPDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snmp_snmp_type_id_get(self, snmp_type, id, **kwargs):  # noqa: E501
        """Get a device from a snmp type with its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snmp_snmp_type_id_get(snmp_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str snmp_type: Name of the snmp type you want to list (required)
        :param int id: Identifiant en base de données de l'équipement (required)
        :return: SNMPDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snmp_snmp_type_id_get_with_http_info(snmp_type, id, **kwargs)  # noqa: E501
        else:
            (data) = self.snmp_snmp_type_id_get_with_http_info(snmp_type, id, **kwargs)  # noqa: E501
            return data

    def snmp_snmp_type_id_get_with_http_info(self, snmp_type, id, **kwargs):  # noqa: E501
        """Get a device from a snmp type with its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snmp_snmp_type_id_get_with_http_info(snmp_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str snmp_type: Name of the snmp type you want to list (required)
        :param int id: Identifiant en base de données de l'équipement (required)
        :return: SNMPDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snmp_type', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snmp_snmp_type_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'snmp_type' is set
        if ('snmp_type' not in params or
                params['snmp_type'] is None):
            raise ValueError("Missing the required parameter `snmp_type` when calling `snmp_snmp_type_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `snmp_snmp_type_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'snmp_type' in params:
            path_params['snmp_type'] = params['snmp_type']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/snmp/{snmp_type}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SNMPDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snmps_type_list_get(self, **kwargs):  # noqa: E501
        """Get a SNMP type list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snmps_type_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SNMPType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snmps_type_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.snmps_type_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def snmps_type_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a SNMP type list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snmps_type_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SNMPType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snmps_type_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/snmps/typeList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SNMPType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def softwares_get(self, **kwargs):  # noqa: E501
        """Get software list from database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.softwares_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :param str soft: Name of the software you want to search (optional)
        :return: SoftwaresList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.softwares_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.softwares_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def softwares_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get software list from database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.softwares_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start offset of the query
        :param int limit: Limit offset of the query
        :param str soft: Name of the software you want to search (optional)
        :return: SoftwaresList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'limit', 'soft']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method softwares_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'soft' in params:
            query_params.append(('soft', params['soft']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/softwares', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SoftwaresList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
