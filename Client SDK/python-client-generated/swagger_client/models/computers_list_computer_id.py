# coding: utf-8

"""
    OCS Inventory Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComputersListComputerId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accountinfo': 'list[ComputersListComputerIdAccountinfo]',
        'batteries': 'list[str]',
        'bios': 'list[ComputersListComputerIdBios]'
    }

    attribute_map = {
        'accountinfo': 'accountinfo',
        'batteries': 'batteries',
        'bios': 'bios'
    }

    def __init__(self, accountinfo=None, batteries=None, bios=None):  # noqa: E501
        """ComputersListComputerId - a model defined in Swagger"""  # noqa: E501
        self._accountinfo = None
        self._batteries = None
        self._bios = None
        self.discriminator = None
        if accountinfo is not None:
            self.accountinfo = accountinfo
        if batteries is not None:
            self.batteries = batteries
        if bios is not None:
            self.bios = bios

    @property
    def accountinfo(self):
        """Gets the accountinfo of this ComputersListComputerId.  # noqa: E501


        :return: The accountinfo of this ComputersListComputerId.  # noqa: E501
        :rtype: list[ComputersListComputerIdAccountinfo]
        """
        return self._accountinfo

    @accountinfo.setter
    def accountinfo(self, accountinfo):
        """Sets the accountinfo of this ComputersListComputerId.


        :param accountinfo: The accountinfo of this ComputersListComputerId.  # noqa: E501
        :type: list[ComputersListComputerIdAccountinfo]
        """

        self._accountinfo = accountinfo

    @property
    def batteries(self):
        """Gets the batteries of this ComputersListComputerId.  # noqa: E501


        :return: The batteries of this ComputersListComputerId.  # noqa: E501
        :rtype: list[str]
        """
        return self._batteries

    @batteries.setter
    def batteries(self, batteries):
        """Sets the batteries of this ComputersListComputerId.


        :param batteries: The batteries of this ComputersListComputerId.  # noqa: E501
        :type: list[str]
        """

        self._batteries = batteries

    @property
    def bios(self):
        """Gets the bios of this ComputersListComputerId.  # noqa: E501


        :return: The bios of this ComputersListComputerId.  # noqa: E501
        :rtype: list[ComputersListComputerIdBios]
        """
        return self._bios

    @bios.setter
    def bios(self, bios):
        """Sets the bios of this ComputersListComputerId.


        :param bios: The bios of this ComputersListComputerId.  # noqa: E501
        :type: list[ComputersListComputerIdBios]
        """

        self._bios = bios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputersListComputerId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputersListComputerId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
