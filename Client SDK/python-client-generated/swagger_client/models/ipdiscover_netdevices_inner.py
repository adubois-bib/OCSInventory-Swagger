# coding: utf-8

"""
    OCS Inventory Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IpdiscoverNetdevicesInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'hardware_id': 'int',
        'ip': 'str',
        'mac': 'str',
        'mask': 'str',
        'name': 'str',
        'netid': 'str',
        'tag': 'str'
    }

    attribute_map = {
        '_date': 'DATE',
        'hardware_id': 'HARDWARE_ID',
        'ip': 'IP',
        'mac': 'MAC',
        'mask': 'MASK',
        'name': 'NAME',
        'netid': 'NETID',
        'tag': 'TAG'
    }

    def __init__(self, _date=None, hardware_id=None, ip=None, mac=None, mask=None, name=None, netid=None, tag=None):  # noqa: E501
        """IpdiscoverNetdevicesInner - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._hardware_id = None
        self._ip = None
        self._mac = None
        self._mask = None
        self._name = None
        self._netid = None
        self._tag = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if hardware_id is not None:
            self.hardware_id = hardware_id
        if ip is not None:
            self.ip = ip
        if mac is not None:
            self.mac = mac
        if mask is not None:
            self.mask = mask
        if name is not None:
            self.name = name
        if netid is not None:
            self.netid = netid
        if tag is not None:
            self.tag = tag

    @property
    def _date(self):
        """Gets the _date of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The _date of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this IpdiscoverNetdevicesInner.


        :param _date: The _date of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def hardware_id(self):
        """Gets the hardware_id of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The hardware_id of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: int
        """
        return self._hardware_id

    @hardware_id.setter
    def hardware_id(self, hardware_id):
        """Sets the hardware_id of this IpdiscoverNetdevicesInner.


        :param hardware_id: The hardware_id of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: int
        """

        self._hardware_id = hardware_id

    @property
    def ip(self):
        """Gets the ip of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The ip of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IpdiscoverNetdevicesInner.


        :param ip: The ip of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def mac(self):
        """Gets the mac of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The mac of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this IpdiscoverNetdevicesInner.


        :param mac: The mac of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def mask(self):
        """Gets the mask of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The mask of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this IpdiscoverNetdevicesInner.


        :param mask: The mask of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: str
        """

        self._mask = mask

    @property
    def name(self):
        """Gets the name of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The name of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IpdiscoverNetdevicesInner.


        :param name: The name of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def netid(self):
        """Gets the netid of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The netid of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: str
        """
        return self._netid

    @netid.setter
    def netid(self, netid):
        """Sets the netid of this IpdiscoverNetdevicesInner.


        :param netid: The netid of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: str
        """

        self._netid = netid

    @property
    def tag(self):
        """Gets the tag of this IpdiscoverNetdevicesInner.  # noqa: E501


        :return: The tag of this IpdiscoverNetdevicesInner.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this IpdiscoverNetdevicesInner.


        :param tag: The tag of this IpdiscoverNetdevicesInner.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpdiscoverNetdevicesInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpdiscoverNetdevicesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
