# coding: utf-8

"""
    OCS Inventory Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SNMPDetailInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_address_ip': 'str',
        'default_description': 'str',
        'default_gateway': 'str',
        'default_location': 'str',
        'default_mac_address': 'str',
        'default_name': 'str',
        'default_uptime': 'str',
        'id': 'int',
        'lastdate': 'datetime'
    }

    attribute_map = {
        'default_address_ip': 'DefaultAddressIP',
        'default_description': 'DefaultDescription',
        'default_gateway': 'DefaultGateway',
        'default_location': 'DefaultLocation',
        'default_mac_address': 'DefaultMacAddress',
        'default_name': 'DefaultName',
        'default_uptime': 'DefaultUptime',
        'id': 'ID',
        'lastdate': 'LASTDATE'
    }

    def __init__(self, default_address_ip=None, default_description=None, default_gateway=None, default_location=None, default_mac_address=None, default_name=None, default_uptime=None, id=None, lastdate=None):  # noqa: E501
        """SNMPDetailInner - a model defined in Swagger"""  # noqa: E501
        self._default_address_ip = None
        self._default_description = None
        self._default_gateway = None
        self._default_location = None
        self._default_mac_address = None
        self._default_name = None
        self._default_uptime = None
        self._id = None
        self._lastdate = None
        self.discriminator = None
        if default_address_ip is not None:
            self.default_address_ip = default_address_ip
        if default_description is not None:
            self.default_description = default_description
        if default_gateway is not None:
            self.default_gateway = default_gateway
        if default_location is not None:
            self.default_location = default_location
        if default_mac_address is not None:
            self.default_mac_address = default_mac_address
        if default_name is not None:
            self.default_name = default_name
        if default_uptime is not None:
            self.default_uptime = default_uptime
        if id is not None:
            self.id = id
        if lastdate is not None:
            self.lastdate = lastdate

    @property
    def default_address_ip(self):
        """Gets the default_address_ip of this SNMPDetailInner.  # noqa: E501


        :return: The default_address_ip of this SNMPDetailInner.  # noqa: E501
        :rtype: str
        """
        return self._default_address_ip

    @default_address_ip.setter
    def default_address_ip(self, default_address_ip):
        """Sets the default_address_ip of this SNMPDetailInner.


        :param default_address_ip: The default_address_ip of this SNMPDetailInner.  # noqa: E501
        :type: str
        """

        self._default_address_ip = default_address_ip

    @property
    def default_description(self):
        """Gets the default_description of this SNMPDetailInner.  # noqa: E501


        :return: The default_description of this SNMPDetailInner.  # noqa: E501
        :rtype: str
        """
        return self._default_description

    @default_description.setter
    def default_description(self, default_description):
        """Sets the default_description of this SNMPDetailInner.


        :param default_description: The default_description of this SNMPDetailInner.  # noqa: E501
        :type: str
        """

        self._default_description = default_description

    @property
    def default_gateway(self):
        """Gets the default_gateway of this SNMPDetailInner.  # noqa: E501


        :return: The default_gateway of this SNMPDetailInner.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this SNMPDetailInner.


        :param default_gateway: The default_gateway of this SNMPDetailInner.  # noqa: E501
        :type: str
        """

        self._default_gateway = default_gateway

    @property
    def default_location(self):
        """Gets the default_location of this SNMPDetailInner.  # noqa: E501


        :return: The default_location of this SNMPDetailInner.  # noqa: E501
        :rtype: str
        """
        return self._default_location

    @default_location.setter
    def default_location(self, default_location):
        """Sets the default_location of this SNMPDetailInner.


        :param default_location: The default_location of this SNMPDetailInner.  # noqa: E501
        :type: str
        """

        self._default_location = default_location

    @property
    def default_mac_address(self):
        """Gets the default_mac_address of this SNMPDetailInner.  # noqa: E501


        :return: The default_mac_address of this SNMPDetailInner.  # noqa: E501
        :rtype: str
        """
        return self._default_mac_address

    @default_mac_address.setter
    def default_mac_address(self, default_mac_address):
        """Sets the default_mac_address of this SNMPDetailInner.


        :param default_mac_address: The default_mac_address of this SNMPDetailInner.  # noqa: E501
        :type: str
        """

        self._default_mac_address = default_mac_address

    @property
    def default_name(self):
        """Gets the default_name of this SNMPDetailInner.  # noqa: E501


        :return: The default_name of this SNMPDetailInner.  # noqa: E501
        :rtype: str
        """
        return self._default_name

    @default_name.setter
    def default_name(self, default_name):
        """Sets the default_name of this SNMPDetailInner.


        :param default_name: The default_name of this SNMPDetailInner.  # noqa: E501
        :type: str
        """

        self._default_name = default_name

    @property
    def default_uptime(self):
        """Gets the default_uptime of this SNMPDetailInner.  # noqa: E501


        :return: The default_uptime of this SNMPDetailInner.  # noqa: E501
        :rtype: str
        """
        return self._default_uptime

    @default_uptime.setter
    def default_uptime(self, default_uptime):
        """Sets the default_uptime of this SNMPDetailInner.


        :param default_uptime: The default_uptime of this SNMPDetailInner.  # noqa: E501
        :type: str
        """

        self._default_uptime = default_uptime

    @property
    def id(self):
        """Gets the id of this SNMPDetailInner.  # noqa: E501


        :return: The id of this SNMPDetailInner.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SNMPDetailInner.


        :param id: The id of this SNMPDetailInner.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lastdate(self):
        """Gets the lastdate of this SNMPDetailInner.  # noqa: E501


        :return: The lastdate of this SNMPDetailInner.  # noqa: E501
        :rtype: datetime
        """
        return self._lastdate

    @lastdate.setter
    def lastdate(self, lastdate):
        """Sets the lastdate of this SNMPDetailInner.


        :param lastdate: The lastdate of this SNMPDetailInner.  # noqa: E501
        :type: datetime
        """

        self._lastdate = lastdate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SNMPDetailInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SNMPDetailInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
