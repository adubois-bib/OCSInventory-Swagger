# coding: utf-8

"""
    OCS Inventory Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComputersListComputerIdBios(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assettag': 'str',
        'bdate': 'str',
        'bmanufacturer': 'str',
        'bversion': 'str',
        'hardware_id': 'int',
        'mmanufacturer': 'str',
        'mmodel': 'str',
        'msn': 'str',
        'smanufacturer': 'str',
        'smodel': 'str',
        'ssn': 'str',
        'type': 'str'
    }

    attribute_map = {
        'assettag': 'ASSETTAG',
        'bdate': 'BDATE',
        'bmanufacturer': 'BMANUFACTURER',
        'bversion': 'BVERSION',
        'hardware_id': 'HARDWARE_ID',
        'mmanufacturer': 'MMANUFACTURER',
        'mmodel': 'MMODEL',
        'msn': 'MSN',
        'smanufacturer': 'SMANUFACTURER',
        'smodel': 'SMODEL',
        'ssn': 'SSN',
        'type': 'TYPE'
    }

    def __init__(self, assettag=None, bdate=None, bmanufacturer=None, bversion=None, hardware_id=None, mmanufacturer=None, mmodel=None, msn=None, smanufacturer=None, smodel=None, ssn=None, type=None):  # noqa: E501
        """ComputersListComputerIdBios - a model defined in Swagger"""  # noqa: E501
        self._assettag = None
        self._bdate = None
        self._bmanufacturer = None
        self._bversion = None
        self._hardware_id = None
        self._mmanufacturer = None
        self._mmodel = None
        self._msn = None
        self._smanufacturer = None
        self._smodel = None
        self._ssn = None
        self._type = None
        self.discriminator = None
        if assettag is not None:
            self.assettag = assettag
        if bdate is not None:
            self.bdate = bdate
        if bmanufacturer is not None:
            self.bmanufacturer = bmanufacturer
        if bversion is not None:
            self.bversion = bversion
        if hardware_id is not None:
            self.hardware_id = hardware_id
        if mmanufacturer is not None:
            self.mmanufacturer = mmanufacturer
        if mmodel is not None:
            self.mmodel = mmodel
        if msn is not None:
            self.msn = msn
        if smanufacturer is not None:
            self.smanufacturer = smanufacturer
        if smodel is not None:
            self.smodel = smodel
        if ssn is not None:
            self.ssn = ssn
        if type is not None:
            self.type = type

    @property
    def assettag(self):
        """Gets the assettag of this ComputersListComputerIdBios.  # noqa: E501


        :return: The assettag of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._assettag

    @assettag.setter
    def assettag(self, assettag):
        """Sets the assettag of this ComputersListComputerIdBios.


        :param assettag: The assettag of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._assettag = assettag

    @property
    def bdate(self):
        """Gets the bdate of this ComputersListComputerIdBios.  # noqa: E501


        :return: The bdate of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._bdate

    @bdate.setter
    def bdate(self, bdate):
        """Sets the bdate of this ComputersListComputerIdBios.


        :param bdate: The bdate of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._bdate = bdate

    @property
    def bmanufacturer(self):
        """Gets the bmanufacturer of this ComputersListComputerIdBios.  # noqa: E501


        :return: The bmanufacturer of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._bmanufacturer

    @bmanufacturer.setter
    def bmanufacturer(self, bmanufacturer):
        """Sets the bmanufacturer of this ComputersListComputerIdBios.


        :param bmanufacturer: The bmanufacturer of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._bmanufacturer = bmanufacturer

    @property
    def bversion(self):
        """Gets the bversion of this ComputersListComputerIdBios.  # noqa: E501


        :return: The bversion of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._bversion

    @bversion.setter
    def bversion(self, bversion):
        """Sets the bversion of this ComputersListComputerIdBios.


        :param bversion: The bversion of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._bversion = bversion

    @property
    def hardware_id(self):
        """Gets the hardware_id of this ComputersListComputerIdBios.  # noqa: E501


        :return: The hardware_id of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: int
        """
        return self._hardware_id

    @hardware_id.setter
    def hardware_id(self, hardware_id):
        """Sets the hardware_id of this ComputersListComputerIdBios.


        :param hardware_id: The hardware_id of this ComputersListComputerIdBios.  # noqa: E501
        :type: int
        """

        self._hardware_id = hardware_id

    @property
    def mmanufacturer(self):
        """Gets the mmanufacturer of this ComputersListComputerIdBios.  # noqa: E501


        :return: The mmanufacturer of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._mmanufacturer

    @mmanufacturer.setter
    def mmanufacturer(self, mmanufacturer):
        """Sets the mmanufacturer of this ComputersListComputerIdBios.


        :param mmanufacturer: The mmanufacturer of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._mmanufacturer = mmanufacturer

    @property
    def mmodel(self):
        """Gets the mmodel of this ComputersListComputerIdBios.  # noqa: E501


        :return: The mmodel of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._mmodel

    @mmodel.setter
    def mmodel(self, mmodel):
        """Sets the mmodel of this ComputersListComputerIdBios.


        :param mmodel: The mmodel of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._mmodel = mmodel

    @property
    def msn(self):
        """Gets the msn of this ComputersListComputerIdBios.  # noqa: E501


        :return: The msn of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._msn

    @msn.setter
    def msn(self, msn):
        """Sets the msn of this ComputersListComputerIdBios.


        :param msn: The msn of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._msn = msn

    @property
    def smanufacturer(self):
        """Gets the smanufacturer of this ComputersListComputerIdBios.  # noqa: E501


        :return: The smanufacturer of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._smanufacturer

    @smanufacturer.setter
    def smanufacturer(self, smanufacturer):
        """Sets the smanufacturer of this ComputersListComputerIdBios.


        :param smanufacturer: The smanufacturer of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._smanufacturer = smanufacturer

    @property
    def smodel(self):
        """Gets the smodel of this ComputersListComputerIdBios.  # noqa: E501


        :return: The smodel of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._smodel

    @smodel.setter
    def smodel(self, smodel):
        """Sets the smodel of this ComputersListComputerIdBios.


        :param smodel: The smodel of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._smodel = smodel

    @property
    def ssn(self):
        """Gets the ssn of this ComputersListComputerIdBios.  # noqa: E501


        :return: The ssn of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this ComputersListComputerIdBios.


        :param ssn: The ssn of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._ssn = ssn

    @property
    def type(self):
        """Gets the type of this ComputersListComputerIdBios.  # noqa: E501


        :return: The type of this ComputersListComputerIdBios.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComputersListComputerIdBios.


        :param type: The type of this ComputersListComputerIdBios.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputersListComputerIdBios, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputersListComputerIdBios):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
