/**
 * OCS Inventory Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.SNMPDetail
import io.swagger.client.model.SNMPType
import io.swagger.client.model.computerDetail
import io.swagger.client.model.computersList
import io.swagger.client.model.ipdiscoverList
import io.swagger.client.model.ipdiscoverNetdevices
import io.swagger.client.model.listOfID
import io.swagger.client.model.softwaresList
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DefaultApi(
  val defBasePath: String = "https://api.ocsinventory-ng.tld/ocsapi/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DefaultApiAsyncHelper(client, config)

  /**
   * Get a computer by its ID
   * 
   *
   * @param id ID of the computer in OCS database 
   * @return computersList
   */
  def computerIdGet(id: Integer): Option[computersList] = {
    val await = Try(Await.result(computerIdGetAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a computer by its ID asynchronously
   * 
   *
   * @param id ID of the computer in OCS database 
   * @return Future(computersList)
   */
  def computerIdGetAsync(id: Integer): Future[computersList] = {
      helper.computerIdGet(id)
  }

  /**
   * Get sections informations of a specific computer
   * 
   *
   * @param id ID of the computer in OCS database 
   * @param sections Name of the requested section (i.e -&gt; bios, software, etc..) 
   * @param where Search on a specific column of the specific section. (optional)
   * @param operator Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)
   * @return computerDetail
   */
  def computerIdSectionsGet(id: Integer, sections: String, where: Option[String] = None, operator: Option[String] = None): Option[computerDetail] = {
    val await = Try(Await.result(computerIdSectionsGetAsync(id, sections, where, operator), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get sections informations of a specific computer asynchronously
   * 
   *
   * @param id ID of the computer in OCS database 
   * @param sections Name of the requested section (i.e -&gt; bios, software, etc..) 
   * @param where Search on a specific column of the specific section. (optional)
   * @param operator Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)
   * @return Future(computerDetail)
   */
  def computerIdSectionsGetAsync(id: Integer, sections: String, where: Option[String] = None, operator: Option[String] = None): Future[computerDetail] = {
      helper.computerIdSectionsGet(id, sections, where, operator)
  }

  /**
   * Get a list of computers with its detail
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return List[computersList]
   */
  def computersGet(start: Option[Integer] = None, limit: Option[Integer] = None): Option[List[computersList]] = {
    val await = Try(Await.result(computersGetAsync(start, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a list of computers with its detail asynchronously
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return Future(List[computersList])
   */
  def computersGetAsync(start: Option[Integer] = None, limit: Option[Integer] = None): Future[List[computersList]] = {
      helper.computersGet(start, limit)
  }

  /**
   * Get a ID list of computers update during the provided timestamp
   * 
   *
   * @param timestamp Timestamp of the number of days to count down from the current date. Optional. 
   * @return List[listOfID]
   */
  def computersLastupdateTimestampGet(timestamp: Integer): Option[List[listOfID]] = {
    val await = Try(Await.result(computersLastupdateTimestampGetAsync(timestamp), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a ID list of computers update during the provided timestamp asynchronously
   * 
   *
   * @param timestamp Timestamp of the number of days to count down from the current date. Optional. 
   * @return Future(List[listOfID])
   */
  def computersLastupdateTimestampGetAsync(timestamp: Integer): Future[List[listOfID]] = {
      helper.computersLastupdateTimestampGet(timestamp)
  }

  /**
   * Get a ID list of all computers in the OCS database
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return List[listOfID]
   */
  def computersListIDGet(start: Option[Integer] = None, limit: Option[Integer] = None): Option[List[listOfID]] = {
    val await = Try(Await.result(computersListIDGetAsync(start, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a ID list of all computers in the OCS database asynchronously
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return Future(List[listOfID])
   */
  def computersListIDGetAsync(start: Option[Integer] = None, limit: Option[Integer] = None): Future[List[listOfID]] = {
      helper.computersListIDGet(start, limit)
  }

  /**
   * List IPDiscover network list
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return ipdiscoverList
   */
  def ipdiscoverGet(start: Option[Integer] = None, limit: Option[Integer] = None): Option[ipdiscoverList] = {
    val await = Try(Await.result(ipdiscoverGetAsync(start, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List IPDiscover network list asynchronously
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return Future(ipdiscoverList)
   */
  def ipdiscoverGetAsync(start: Option[Integer] = None, limit: Option[Integer] = None): Future[ipdiscoverList] = {
      helper.ipdiscoverGet(start, limit)
  }

  /**
   * Get list of network devices scanned on one network
   * 
   *
   * @param netid Start offset of the query 
   * @return ipdiscoverNetdevices
   */
  def ipdiscoverNetworkNetidGet(netid: Integer): Option[ipdiscoverNetdevices] = {
    val await = Try(Await.result(ipdiscoverNetworkNetidGetAsync(netid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get list of network devices scanned on one network asynchronously
   * 
   *
   * @param netid Start offset of the query 
   * @return Future(ipdiscoverNetdevices)
   */
  def ipdiscoverNetworkNetidGetAsync(netid: Integer): Future[ipdiscoverNetdevices] = {
      helper.ipdiscoverNetworkNetidGet(netid)
  }

  /**
   * Get snmp device list of a specific snmp type
   * 
   *
   * @param snmpType Name of the snmp type you want to list 
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return SNMPDetail
   */
  def snmpSnmpTypeGet(snmpType: String, start: Option[Integer] = None, limit: Option[Integer] = None): Option[SNMPDetail] = {
    val await = Try(Await.result(snmpSnmpTypeGetAsync(snmpType, start, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get snmp device list of a specific snmp type asynchronously
   * 
   *
   * @param snmpType Name of the snmp type you want to list 
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @return Future(SNMPDetail)
   */
  def snmpSnmpTypeGetAsync(snmpType: String, start: Option[Integer] = None, limit: Option[Integer] = None): Future[SNMPDetail] = {
      helper.snmpSnmpTypeGet(snmpType, start, limit)
  }

  /**
   * Get a device from a snmp type with its ID
   * 
   *
   * @param snmpType Name of the snmp type you want to list 
   * @param id Identifiant en base de données de l&#x27;équipement 
   * @return SNMPDetail
   */
  def snmpSnmpTypeIdGet(snmpType: String, id: Integer): Option[SNMPDetail] = {
    val await = Try(Await.result(snmpSnmpTypeIdGetAsync(snmpType, id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a device from a snmp type with its ID asynchronously
   * 
   *
   * @param snmpType Name of the snmp type you want to list 
   * @param id Identifiant en base de données de l&#x27;équipement 
   * @return Future(SNMPDetail)
   */
  def snmpSnmpTypeIdGetAsync(snmpType: String, id: Integer): Future[SNMPDetail] = {
      helper.snmpSnmpTypeIdGet(snmpType, id)
  }

  /**
   * Get a SNMP type list
   * 
   *
   * @return SNMPType
   */
  def snmpsTypeListGet(): Option[SNMPType] = {
    val await = Try(Await.result(snmpsTypeListGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a SNMP type list asynchronously
   * 
   *
   * @return Future(SNMPType)
   */
  def snmpsTypeListGetAsync(): Future[SNMPType] = {
      helper.snmpsTypeListGet()
  }

  /**
   * Get software list from database
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @param soft Name of the software you want to search (optional) (optional)
   * @return softwaresList
   */
  def softwaresGet(start: Option[Integer] = None, limit: Option[Integer] = None, soft: Option[String] = None): Option[softwaresList] = {
    val await = Try(Await.result(softwaresGetAsync(start, limit, soft), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get software list from database asynchronously
   * 
   *
   * @param start Start offset of the query (optional)
   * @param limit Limit offset of the query (optional)
   * @param soft Name of the software you want to search (optional) (optional)
   * @return Future(softwaresList)
   */
  def softwaresGetAsync(start: Option[Integer] = None, limit: Option[Integer] = None, soft: Option[String] = None): Future[softwaresList] = {
      helper.softwaresGet(start, limit, soft)
  }

}

class DefaultApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def computerIdGet(id: Integer)(implicit reader: ClientResponseReader[computersList]): Future[computersList] = {
    // create path and map variables
    val path = (addFmt("/computer/{id}")
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def computerIdSectionsGet(id: Integer,
    sections: String,
    where: Option[String] = None,
    operator: Option[String] = None
    )(implicit reader: ClientResponseReader[computerDetail]): Future[computerDetail] = {
    // create path and map variables
    val path = (addFmt("/computer/{id}/{sections}")
      replaceAll("\\{" + "id" + "\\}", id.toString)
      replaceAll("\\{" + "sections" + "\\}", sections.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (sections == null) throw new Exception("Missing required parameter 'sections' when calling DefaultApi->computerIdSectionsGet")

    where match {
      case Some(param) => queryParams += "where" -> param.toString
      case _ => queryParams
    }
    operator match {
      case Some(param) => queryParams += "operator" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def computersGet(start: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[List[computersList]]): Future[List[computersList]] = {
    // create path and map variables
    val path = (addFmt("/computers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    start match {
      case Some(param) => queryParams += "start" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def computersLastupdateTimestampGet(timestamp: Integer)(implicit reader: ClientResponseReader[List[listOfID]]): Future[List[listOfID]] = {
    // create path and map variables
    val path = (addFmt("/computers/lastupdate/{timestamp}")
      replaceAll("\\{" + "timestamp" + "\\}", timestamp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def computersListIDGet(start: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[List[listOfID]]): Future[List[listOfID]] = {
    // create path and map variables
    val path = (addFmt("/computers/listID"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    start match {
      case Some(param) => queryParams += "start" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def ipdiscoverGet(start: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[ipdiscoverList]): Future[ipdiscoverList] = {
    // create path and map variables
    val path = (addFmt("/ipdiscover"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    start match {
      case Some(param) => queryParams += "start" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def ipdiscoverNetworkNetidGet(netid: Integer)(implicit reader: ClientResponseReader[ipdiscoverNetdevices]): Future[ipdiscoverNetdevices] = {
    // create path and map variables
    val path = (addFmt("/ipdiscover/network/{netid}")
      replaceAll("\\{" + "netid" + "\\}", netid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def snmpSnmpTypeGet(snmpType: String,
    start: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[SNMPDetail]): Future[SNMPDetail] = {
    // create path and map variables
    val path = (addFmt("/snmp/{snmp_type}")
      replaceAll("\\{" + "snmp_type" + "\\}", snmpType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (snmpType == null) throw new Exception("Missing required parameter 'snmpType' when calling DefaultApi->snmpSnmpTypeGet")

    start match {
      case Some(param) => queryParams += "start" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def snmpSnmpTypeIdGet(snmpType: String,
    id: Integer)(implicit reader: ClientResponseReader[SNMPDetail]): Future[SNMPDetail] = {
    // create path and map variables
    val path = (addFmt("/snmp/{snmp_type}/{id}")
      replaceAll("\\{" + "snmp_type" + "\\}", snmpType.toString)
      replaceAll("\\{" + "id" + "\\}", id.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (snmpType == null) throw new Exception("Missing required parameter 'snmpType' when calling DefaultApi->snmpSnmpTypeIdGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def snmpsTypeListGet()(implicit reader: ClientResponseReader[SNMPType]): Future[SNMPType] = {
    // create path and map variables
    val path = (addFmt("/snmps/typeList"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def softwaresGet(start: Option[Integer] = None,
    limit: Option[Integer] = None,
    soft: Option[String] = None
    )(implicit reader: ClientResponseReader[softwaresList]): Future[softwaresList] = {
    // create path and map variables
    val path = (addFmt("/softwares"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    start match {
      case Some(param) => queryParams += "start" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    soft match {
      case Some(param) => queryParams += "soft" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
