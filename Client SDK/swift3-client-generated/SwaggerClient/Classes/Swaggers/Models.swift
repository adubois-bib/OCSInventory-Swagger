// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }
        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [ComputerDetail]
        Decoders.addDecoder(clazz: [ComputerDetail].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComputerDetail]> in
            return Decoders.decode(clazz: [ComputerDetail].self, source: source)
        }

        // Decoder for ComputerDetail
        Decoders.addDecoder(clazz: ComputerDetail.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComputerDetail> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComputerDetail() : instance as! ComputerDetail
                switch Decoders.decodeOptional(clazz: ComputerDetailComputerId.self, source: sourceDictionary["{computer_id}"] as AnyObject?) {
                case let .success(value): _result.computerId = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComputerDetail", actual: "\(source)"))
            }
        }
        // Decoder for [ComputerDetailComputerId]
        Decoders.addDecoder(clazz: [ComputerDetailComputerId].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComputerDetailComputerId]> in
            return Decoders.decode(clazz: [ComputerDetailComputerId].self, source: source)
        }

        // Decoder for ComputerDetailComputerId
        Decoders.addDecoder(clazz: ComputerDetailComputerId.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComputerDetailComputerId> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComputerDetailComputerId() : instance as! ComputerDetailComputerId
                switch Decoders.decodeOptional(clazz: [ComputersListComputerIdBios].self, source: sourceDictionary["bios"] as AnyObject?) {
                case let .success(value): _result.bios = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComputerDetailComputerId", actual: "\(source)"))
            }
        }
        // Decoder for [ComputersList]
        Decoders.addDecoder(clazz: [ComputersList].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComputersList]> in
            return Decoders.decode(clazz: [ComputersList].self, source: source)
        }

        // Decoder for ComputersList
        Decoders.addDecoder(clazz: ComputersList.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComputersList> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComputersList() : instance as! ComputersList
                switch Decoders.decodeOptional(clazz: ComputersListComputerId.self, source: sourceDictionary["{computer_id}"] as AnyObject?) {
                case let .success(value): _result.computerId = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComputersList", actual: "\(source)"))
            }
        }
        // Decoder for [ComputersListComputerId]
        Decoders.addDecoder(clazz: [ComputersListComputerId].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComputersListComputerId]> in
            return Decoders.decode(clazz: [ComputersListComputerId].self, source: source)
        }

        // Decoder for ComputersListComputerId
        Decoders.addDecoder(clazz: ComputersListComputerId.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComputersListComputerId> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComputersListComputerId() : instance as! ComputersListComputerId
                switch Decoders.decodeOptional(clazz: [ComputersListComputerIdAccountinfo].self, source: sourceDictionary["accountinfo"] as AnyObject?) {
                case let .success(value): _result.accountinfo = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["batteries"] as AnyObject?) {
                case let .success(value): _result.batteries = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [ComputersListComputerIdBios].self, source: sourceDictionary["bios"] as AnyObject?) {
                case let .success(value): _result.bios = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComputersListComputerId", actual: "\(source)"))
            }
        }
        // Decoder for [ComputersListComputerIdAccountinfo]
        Decoders.addDecoder(clazz: [ComputersListComputerIdAccountinfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComputersListComputerIdAccountinfo]> in
            return Decoders.decode(clazz: [ComputersListComputerIdAccountinfo].self, source: source)
        }

        // Decoder for ComputersListComputerIdAccountinfo
        Decoders.addDecoder(clazz: ComputersListComputerIdAccountinfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComputersListComputerIdAccountinfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComputersListComputerIdAccountinfo() : instance as! ComputersListComputerIdAccountinfo
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["HARDWARE_ID"] as AnyObject?) {
                case let .success(value): _result.HARDWARE_ID = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TAG"] as AnyObject?) {
                case let .success(value): _result.TAG = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComputersListComputerIdAccountinfo", actual: "\(source)"))
            }
        }
        // Decoder for [ComputersListComputerIdBios]
        Decoders.addDecoder(clazz: [ComputersListComputerIdBios].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ComputersListComputerIdBios]> in
            return Decoders.decode(clazz: [ComputersListComputerIdBios].self, source: source)
        }

        // Decoder for ComputersListComputerIdBios
        Decoders.addDecoder(clazz: ComputersListComputerIdBios.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComputersListComputerIdBios> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ComputersListComputerIdBios() : instance as! ComputersListComputerIdBios
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ASSETTAG"] as AnyObject?) {
                case let .success(value): _result.ASSETTAG = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BDATE"] as AnyObject?) {
                case let .success(value): _result.BDATE = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BMANUFACTURER"] as AnyObject?) {
                case let .success(value): _result.BMANUFACTURER = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BVERSION"] as AnyObject?) {
                case let .success(value): _result.BVERSION = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["HARDWARE_ID"] as AnyObject?) {
                case let .success(value): _result.HARDWARE_ID = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MMANUFACTURER"] as AnyObject?) {
                case let .success(value): _result.MMANUFACTURER = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MMODEL"] as AnyObject?) {
                case let .success(value): _result.MMODEL = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MSN"] as AnyObject?) {
                case let .success(value): _result.MSN = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SMANUFACTURER"] as AnyObject?) {
                case let .success(value): _result.SMANUFACTURER = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SMODEL"] as AnyObject?) {
                case let .success(value): _result.SMODEL = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SSN"] as AnyObject?) {
                case let .success(value): _result.SSN = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TYPE"] as AnyObject?) {
                case let .success(value): _result.TYPE = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ComputersListComputerIdBios", actual: "\(source)"))
            }
        }
        // Decoder for [IpdiscoverListInner]
        Decoders.addDecoder(clazz: [IpdiscoverListInner].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IpdiscoverListInner]> in
            return Decoders.decode(clazz: [IpdiscoverListInner].self, source: source)
        }

        // Decoder for IpdiscoverListInner
        Decoders.addDecoder(clazz: IpdiscoverListInner.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IpdiscoverListInner> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IpdiscoverListInner() : instance as! IpdiscoverListInner
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NETID"] as AnyObject?) {
                case let .success(value): _result.NETID = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IpdiscoverListInner", actual: "\(source)"))
            }
        }
        // Decoder for [IpdiscoverNetdevicesInner]
        Decoders.addDecoder(clazz: [IpdiscoverNetdevicesInner].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IpdiscoverNetdevicesInner]> in
            return Decoders.decode(clazz: [IpdiscoverNetdevicesInner].self, source: source)
        }

        // Decoder for IpdiscoverNetdevicesInner
        Decoders.addDecoder(clazz: IpdiscoverNetdevicesInner.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IpdiscoverNetdevicesInner> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IpdiscoverNetdevicesInner() : instance as! IpdiscoverNetdevicesInner
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["DATE"] as AnyObject?) {
                case let .success(value): _result.DATE = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["HARDWARE_ID"] as AnyObject?) {
                case let .success(value): _result.HARDWARE_ID = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IP"] as AnyObject?) {
                case let .success(value): _result.IP = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MAC"] as AnyObject?) {
                case let .success(value): _result.MAC = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MASK"] as AnyObject?) {
                case let .success(value): _result.MASK = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NAME"] as AnyObject?) {
                case let .success(value): _result.NAME = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NETID"] as AnyObject?) {
                case let .success(value): _result.NETID = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TAG"] as AnyObject?) {
                case let .success(value): _result.TAG = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IpdiscoverNetdevicesInner", actual: "\(source)"))
            }
        }
        // Decoder for [ListOfID]
        Decoders.addDecoder(clazz: [ListOfID].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ListOfID]> in
            return Decoders.decode(clazz: [ListOfID].self, source: source)
        }

        // Decoder for ListOfID
        Decoders.addDecoder(clazz: ListOfID.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ListOfID> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ListOfID() : instance as! ListOfID
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ID"] as AnyObject?) {
                case let .success(value): _result.ID = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ListOfID", actual: "\(source)"))
            }
        }
        // Decoder for [SNMPDetailInner]
        Decoders.addDecoder(clazz: [SNMPDetailInner].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SNMPDetailInner]> in
            return Decoders.decode(clazz: [SNMPDetailInner].self, source: source)
        }

        // Decoder for SNMPDetailInner
        Decoders.addDecoder(clazz: SNMPDetailInner.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SNMPDetailInner> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SNMPDetailInner() : instance as! SNMPDetailInner
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultAddressIP"] as AnyObject?) {
                case let .success(value): _result.defaultAddressIP = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultDescription"] as AnyObject?) {
                case let .success(value): _result.defaultDescription = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultGateway"] as AnyObject?) {
                case let .success(value): _result.defaultGateway = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultLocation"] as AnyObject?) {
                case let .success(value): _result.defaultLocation = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultMacAddress"] as AnyObject?) {
                case let .success(value): _result.defaultMacAddress = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultName"] as AnyObject?) {
                case let .success(value): _result.defaultName = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultUptime"] as AnyObject?) {
                case let .success(value): _result.defaultUptime = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ID"] as AnyObject?) {
                case let .success(value): _result.ID = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["LASTDATE"] as AnyObject?) {
                case let .success(value): _result.LASTDATE = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SNMPDetailInner", actual: "\(source)"))
            }
        }
        // Decoder for [SNMPTypeInner]
        Decoders.addDecoder(clazz: [SNMPTypeInner].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SNMPTypeInner]> in
            return Decoders.decode(clazz: [SNMPTypeInner].self, source: source)
        }

        // Decoder for SNMPTypeInner
        Decoders.addDecoder(clazz: SNMPTypeInner.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SNMPTypeInner> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SNMPTypeInner() : instance as! SNMPTypeInner
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ID"] as AnyObject?) {
                case let .success(value): _result.ID = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TABLE_TYPE_NAME"] as AnyObject?) {
                case let .success(value): _result.TABLE_TYPE_NAME = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TYPE_NAME"] as AnyObject?) {
                case let .success(value): _result.TYPE_NAME = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SNMPTypeInner", actual: "\(source)"))
            }
        }
        // Decoder for [SoftwaresListInner]
        Decoders.addDecoder(clazz: [SoftwaresListInner].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SoftwaresListInner]> in
            return Decoders.decode(clazz: [SoftwaresListInner].self, source: source)
        }

        // Decoder for SoftwaresListInner
        Decoders.addDecoder(clazz: SoftwaresListInner.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SoftwaresListInner> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SoftwaresListInner() : instance as! SoftwaresListInner
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NAME"] as AnyObject?) {
                case let .success(value): _result.NAME = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PUBLISHER"] as AnyObject?) {
                case let .success(value): _result.PUBLISHER = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["VERSION"] as AnyObject?) {
                case let .success(value): _result.VERSION = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SoftwaresListInner", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
