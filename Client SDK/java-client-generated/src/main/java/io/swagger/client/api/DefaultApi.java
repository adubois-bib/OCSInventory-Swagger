/*
 * OCS Inventory Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ComputerDetail;
import io.swagger.client.model.ComputersList;
import io.swagger.client.model.IpdiscoverList;
import io.swagger.client.model.IpdiscoverNetdevices;
import io.swagger.client.model.ListOfID;
import io.swagger.client.model.SNMPDetail;
import io.swagger.client.model.SNMPType;
import io.swagger.client.model.SoftwaresList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for computerIdGet
     * @param id ID of the computer in OCS database (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call computerIdGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/computer/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call computerIdGetValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling computerIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = computerIdGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a computer by its ID
     * 
     * @param id ID of the computer in OCS database (required)
     * @return ComputersList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputersList computerIdGet(Integer id) throws ApiException {
        ApiResponse<ComputersList> resp = computerIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a computer by its ID
     * 
     * @param id ID of the computer in OCS database (required)
     * @return ApiResponse&lt;ComputersList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputersList> computerIdGetWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = computerIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ComputersList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a computer by its ID (asynchronously)
     * 
     * @param id ID of the computer in OCS database (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call computerIdGetAsync(Integer id, final ApiCallback<ComputersList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = computerIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputersList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for computerIdSectionsGet
     * @param id ID of the computer in OCS database (required)
     * @param sections Name of the requested section (i.e -&gt; bios, software, etc..) (required)
     * @param where Search on a specific column of the specific section. (optional)
     * @param operator Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call computerIdSectionsGetCall(Integer id, String sections, String where, String operator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/computer/{id}/{sections}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "sections" + "\\}", apiClient.escapeString(sections.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("where", where));
        if (operator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operator", operator));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call computerIdSectionsGetValidateBeforeCall(Integer id, String sections, String where, String operator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling computerIdSectionsGet(Async)");
        }
        // verify the required parameter 'sections' is set
        if (sections == null) {
            throw new ApiException("Missing the required parameter 'sections' when calling computerIdSectionsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = computerIdSectionsGetCall(id, sections, where, operator, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get sections informations of a specific computer
     * 
     * @param id ID of the computer in OCS database (required)
     * @param sections Name of the requested section (i.e -&gt; bios, software, etc..) (required)
     * @param where Search on a specific column of the specific section. (optional)
     * @param operator Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)
     * @return ComputerDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComputerDetail computerIdSectionsGet(Integer id, String sections, String where, String operator) throws ApiException {
        ApiResponse<ComputerDetail> resp = computerIdSectionsGetWithHttpInfo(id, sections, where, operator);
        return resp.getData();
    }

    /**
     * Get sections informations of a specific computer
     * 
     * @param id ID of the computer in OCS database (required)
     * @param sections Name of the requested section (i.e -&gt; bios, software, etc..) (required)
     * @param where Search on a specific column of the specific section. (optional)
     * @param operator Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)
     * @return ApiResponse&lt;ComputerDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComputerDetail> computerIdSectionsGetWithHttpInfo(Integer id, String sections, String where, String operator) throws ApiException {
        com.squareup.okhttp.Call call = computerIdSectionsGetValidateBeforeCall(id, sections, where, operator, null, null);
        Type localVarReturnType = new TypeToken<ComputerDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get sections informations of a specific computer (asynchronously)
     * 
     * @param id ID of the computer in OCS database (required)
     * @param sections Name of the requested section (i.e -&gt; bios, software, etc..) (required)
     * @param where Search on a specific column of the specific section. (optional)
     * @param operator Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call computerIdSectionsGetAsync(Integer id, String sections, String where, String operator, final ApiCallback<ComputerDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = computerIdSectionsGetValidateBeforeCall(id, sections, where, operator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComputerDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for computersGet
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call computersGetCall(Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/computers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call computersGetValidateBeforeCall(Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = computersGetCall(start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of computers with its detail
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return List&lt;ComputersList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ComputersList> computersGet(Integer start, Integer limit) throws ApiException {
        ApiResponse<List<ComputersList>> resp = computersGetWithHttpInfo(start, limit);
        return resp.getData();
    }

    /**
     * Get a list of computers with its detail
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return ApiResponse&lt;List&lt;ComputersList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ComputersList>> computersGetWithHttpInfo(Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = computersGetValidateBeforeCall(start, limit, null, null);
        Type localVarReturnType = new TypeToken<List<ComputersList>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of computers with its detail (asynchronously)
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call computersGetAsync(Integer start, Integer limit, final ApiCallback<List<ComputersList>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = computersGetValidateBeforeCall(start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ComputersList>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for computersLastupdateTimestampGet
     * @param timestamp Timestamp of the number of days to count down from the current date. Optional. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call computersLastupdateTimestampGetCall(Integer timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/computers/lastupdate/{timestamp}"
            .replaceAll("\\{" + "timestamp" + "\\}", apiClient.escapeString(timestamp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call computersLastupdateTimestampGetValidateBeforeCall(Integer timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling computersLastupdateTimestampGet(Async)");
        }
        
        com.squareup.okhttp.Call call = computersLastupdateTimestampGetCall(timestamp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a ID list of computers update during the provided timestamp
     * 
     * @param timestamp Timestamp of the number of days to count down from the current date. Optional. (required)
     * @return List&lt;ListOfID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ListOfID> computersLastupdateTimestampGet(Integer timestamp) throws ApiException {
        ApiResponse<List<ListOfID>> resp = computersLastupdateTimestampGetWithHttpInfo(timestamp);
        return resp.getData();
    }

    /**
     * Get a ID list of computers update during the provided timestamp
     * 
     * @param timestamp Timestamp of the number of days to count down from the current date. Optional. (required)
     * @return ApiResponse&lt;List&lt;ListOfID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ListOfID>> computersLastupdateTimestampGetWithHttpInfo(Integer timestamp) throws ApiException {
        com.squareup.okhttp.Call call = computersLastupdateTimestampGetValidateBeforeCall(timestamp, null, null);
        Type localVarReturnType = new TypeToken<List<ListOfID>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a ID list of computers update during the provided timestamp (asynchronously)
     * 
     * @param timestamp Timestamp of the number of days to count down from the current date. Optional. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call computersLastupdateTimestampGetAsync(Integer timestamp, final ApiCallback<List<ListOfID>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = computersLastupdateTimestampGetValidateBeforeCall(timestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ListOfID>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for computersListIDGet
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call computersListIDGetCall(Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/computers/listID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call computersListIDGetValidateBeforeCall(Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = computersListIDGetCall(start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a ID list of all computers in the OCS database
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return List&lt;ListOfID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ListOfID> computersListIDGet(Integer start, Integer limit) throws ApiException {
        ApiResponse<List<ListOfID>> resp = computersListIDGetWithHttpInfo(start, limit);
        return resp.getData();
    }

    /**
     * Get a ID list of all computers in the OCS database
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return ApiResponse&lt;List&lt;ListOfID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ListOfID>> computersListIDGetWithHttpInfo(Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = computersListIDGetValidateBeforeCall(start, limit, null, null);
        Type localVarReturnType = new TypeToken<List<ListOfID>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a ID list of all computers in the OCS database (asynchronously)
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call computersListIDGetAsync(Integer start, Integer limit, final ApiCallback<List<ListOfID>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = computersListIDGetValidateBeforeCall(start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ListOfID>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipdiscoverGet
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipdiscoverGetCall(Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipdiscover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipdiscoverGetValidateBeforeCall(Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ipdiscoverGetCall(start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List IPDiscover network list
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return IpdiscoverList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpdiscoverList ipdiscoverGet(Integer start, Integer limit) throws ApiException {
        ApiResponse<IpdiscoverList> resp = ipdiscoverGetWithHttpInfo(start, limit);
        return resp.getData();
    }

    /**
     * List IPDiscover network list
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return ApiResponse&lt;IpdiscoverList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpdiscoverList> ipdiscoverGetWithHttpInfo(Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = ipdiscoverGetValidateBeforeCall(start, limit, null, null);
        Type localVarReturnType = new TypeToken<IpdiscoverList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List IPDiscover network list (asynchronously)
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipdiscoverGetAsync(Integer start, Integer limit, final ApiCallback<IpdiscoverList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipdiscoverGetValidateBeforeCall(start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpdiscoverList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipdiscoverNetworkNetidGet
     * @param netid Start offset of the query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipdiscoverNetworkNetidGetCall(Integer netid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ipdiscover/network/{netid}"
            .replaceAll("\\{" + "netid" + "\\}", apiClient.escapeString(netid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipdiscoverNetworkNetidGetValidateBeforeCall(Integer netid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'netid' is set
        if (netid == null) {
            throw new ApiException("Missing the required parameter 'netid' when calling ipdiscoverNetworkNetidGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ipdiscoverNetworkNetidGetCall(netid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of network devices scanned on one network
     * 
     * @param netid Start offset of the query (required)
     * @return IpdiscoverNetdevices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpdiscoverNetdevices ipdiscoverNetworkNetidGet(Integer netid) throws ApiException {
        ApiResponse<IpdiscoverNetdevices> resp = ipdiscoverNetworkNetidGetWithHttpInfo(netid);
        return resp.getData();
    }

    /**
     * Get list of network devices scanned on one network
     * 
     * @param netid Start offset of the query (required)
     * @return ApiResponse&lt;IpdiscoverNetdevices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpdiscoverNetdevices> ipdiscoverNetworkNetidGetWithHttpInfo(Integer netid) throws ApiException {
        com.squareup.okhttp.Call call = ipdiscoverNetworkNetidGetValidateBeforeCall(netid, null, null);
        Type localVarReturnType = new TypeToken<IpdiscoverNetdevices>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of network devices scanned on one network (asynchronously)
     * 
     * @param netid Start offset of the query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipdiscoverNetworkNetidGetAsync(Integer netid, final ApiCallback<IpdiscoverNetdevices> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipdiscoverNetworkNetidGetValidateBeforeCall(netid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpdiscoverNetdevices>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for snmpSnmpTypeGet
     * @param snmpType Name of the snmp type you want to list (required)
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snmpSnmpTypeGetCall(String snmpType, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/snmp/{snmp_type}"
            .replaceAll("\\{" + "snmp_type" + "\\}", apiClient.escapeString(snmpType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snmpSnmpTypeGetValidateBeforeCall(String snmpType, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'snmpType' is set
        if (snmpType == null) {
            throw new ApiException("Missing the required parameter 'snmpType' when calling snmpSnmpTypeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = snmpSnmpTypeGetCall(snmpType, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get snmp device list of a specific snmp type
     * 
     * @param snmpType Name of the snmp type you want to list (required)
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return SNMPDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SNMPDetail snmpSnmpTypeGet(String snmpType, Integer start, Integer limit) throws ApiException {
        ApiResponse<SNMPDetail> resp = snmpSnmpTypeGetWithHttpInfo(snmpType, start, limit);
        return resp.getData();
    }

    /**
     * Get snmp device list of a specific snmp type
     * 
     * @param snmpType Name of the snmp type you want to list (required)
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @return ApiResponse&lt;SNMPDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SNMPDetail> snmpSnmpTypeGetWithHttpInfo(String snmpType, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = snmpSnmpTypeGetValidateBeforeCall(snmpType, start, limit, null, null);
        Type localVarReturnType = new TypeToken<SNMPDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get snmp device list of a specific snmp type (asynchronously)
     * 
     * @param snmpType Name of the snmp type you want to list (required)
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snmpSnmpTypeGetAsync(String snmpType, Integer start, Integer limit, final ApiCallback<SNMPDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snmpSnmpTypeGetValidateBeforeCall(snmpType, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SNMPDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for snmpSnmpTypeIdGet
     * @param snmpType Name of the snmp type you want to list (required)
     * @param id Identifiant en base de données de l&#x27;équipement (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snmpSnmpTypeIdGetCall(String snmpType, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/snmp/{snmp_type}/{id}"
            .replaceAll("\\{" + "snmp_type" + "\\}", apiClient.escapeString(snmpType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snmpSnmpTypeIdGetValidateBeforeCall(String snmpType, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'snmpType' is set
        if (snmpType == null) {
            throw new ApiException("Missing the required parameter 'snmpType' when calling snmpSnmpTypeIdGet(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling snmpSnmpTypeIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = snmpSnmpTypeIdGetCall(snmpType, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a device from a snmp type with its ID
     * 
     * @param snmpType Name of the snmp type you want to list (required)
     * @param id Identifiant en base de données de l&#x27;équipement (required)
     * @return SNMPDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SNMPDetail snmpSnmpTypeIdGet(String snmpType, Integer id) throws ApiException {
        ApiResponse<SNMPDetail> resp = snmpSnmpTypeIdGetWithHttpInfo(snmpType, id);
        return resp.getData();
    }

    /**
     * Get a device from a snmp type with its ID
     * 
     * @param snmpType Name of the snmp type you want to list (required)
     * @param id Identifiant en base de données de l&#x27;équipement (required)
     * @return ApiResponse&lt;SNMPDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SNMPDetail> snmpSnmpTypeIdGetWithHttpInfo(String snmpType, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = snmpSnmpTypeIdGetValidateBeforeCall(snmpType, id, null, null);
        Type localVarReturnType = new TypeToken<SNMPDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a device from a snmp type with its ID (asynchronously)
     * 
     * @param snmpType Name of the snmp type you want to list (required)
     * @param id Identifiant en base de données de l&#x27;équipement (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snmpSnmpTypeIdGetAsync(String snmpType, Integer id, final ApiCallback<SNMPDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snmpSnmpTypeIdGetValidateBeforeCall(snmpType, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SNMPDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for snmpsTypeListGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call snmpsTypeListGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/snmps/typeList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call snmpsTypeListGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = snmpsTypeListGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a SNMP type list
     * 
     * @return SNMPType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SNMPType snmpsTypeListGet() throws ApiException {
        ApiResponse<SNMPType> resp = snmpsTypeListGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a SNMP type list
     * 
     * @return ApiResponse&lt;SNMPType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SNMPType> snmpsTypeListGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = snmpsTypeListGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SNMPType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a SNMP type list (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call snmpsTypeListGetAsync(final ApiCallback<SNMPType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = snmpsTypeListGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SNMPType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for softwaresGet
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param soft Name of the software you want to search (optional) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call softwaresGetCall(Integer start, Integer limit, String soft, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/softwares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (soft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("soft", soft));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call softwaresGetValidateBeforeCall(Integer start, Integer limit, String soft, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = softwaresGetCall(start, limit, soft, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get software list from database
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param soft Name of the software you want to search (optional) (optional)
     * @return SoftwaresList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoftwaresList softwaresGet(Integer start, Integer limit, String soft) throws ApiException {
        ApiResponse<SoftwaresList> resp = softwaresGetWithHttpInfo(start, limit, soft);
        return resp.getData();
    }

    /**
     * Get software list from database
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param soft Name of the software you want to search (optional) (optional)
     * @return ApiResponse&lt;SoftwaresList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoftwaresList> softwaresGetWithHttpInfo(Integer start, Integer limit, String soft) throws ApiException {
        com.squareup.okhttp.Call call = softwaresGetValidateBeforeCall(start, limit, soft, null, null);
        Type localVarReturnType = new TypeToken<SoftwaresList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get software list from database (asynchronously)
     * 
     * @param start Start offset of the query (optional)
     * @param limit Limit offset of the query (optional)
     * @param soft Name of the software you want to search (optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call softwaresGetAsync(Integer start, Integer limit, String soft, final ApiCallback<SoftwaresList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = softwaresGetValidateBeforeCall(start, limit, soft, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoftwaresList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
