<?php
/**
 * SNMPDetailInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OCS Inventory Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SNMPDetailInner Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SNMPDetailInner implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SNMPDetail_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_address_ip' => 'string',
        'default_description' => 'string',
        'default_gateway' => 'string',
        'default_location' => 'string',
        'default_mac_address' => 'string',
        'default_name' => 'string',
        'default_uptime' => 'string',
        'id' => 'int',
        'lastdate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_address_ip' => null,
        'default_description' => null,
        'default_gateway' => null,
        'default_location' => null,
        'default_mac_address' => 'nullable',
        'default_name' => null,
        'default_uptime' => 'nullable',
        'id' => 'int32',
        'lastdate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_address_ip' => 'DefaultAddressIP',
        'default_description' => 'DefaultDescription',
        'default_gateway' => 'DefaultGateway',
        'default_location' => 'DefaultLocation',
        'default_mac_address' => 'DefaultMacAddress',
        'default_name' => 'DefaultName',
        'default_uptime' => 'DefaultUptime',
        'id' => 'ID',
        'lastdate' => 'LASTDATE'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_address_ip' => 'setDefaultAddressIp',
        'default_description' => 'setDefaultDescription',
        'default_gateway' => 'setDefaultGateway',
        'default_location' => 'setDefaultLocation',
        'default_mac_address' => 'setDefaultMacAddress',
        'default_name' => 'setDefaultName',
        'default_uptime' => 'setDefaultUptime',
        'id' => 'setId',
        'lastdate' => 'setLastdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_address_ip' => 'getDefaultAddressIp',
        'default_description' => 'getDefaultDescription',
        'default_gateway' => 'getDefaultGateway',
        'default_location' => 'getDefaultLocation',
        'default_mac_address' => 'getDefaultMacAddress',
        'default_name' => 'getDefaultName',
        'default_uptime' => 'getDefaultUptime',
        'id' => 'getId',
        'lastdate' => 'getLastdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_address_ip'] = isset($data['default_address_ip']) ? $data['default_address_ip'] : null;
        $this->container['default_description'] = isset($data['default_description']) ? $data['default_description'] : null;
        $this->container['default_gateway'] = isset($data['default_gateway']) ? $data['default_gateway'] : null;
        $this->container['default_location'] = isset($data['default_location']) ? $data['default_location'] : null;
        $this->container['default_mac_address'] = isset($data['default_mac_address']) ? $data['default_mac_address'] : null;
        $this->container['default_name'] = isset($data['default_name']) ? $data['default_name'] : null;
        $this->container['default_uptime'] = isset($data['default_uptime']) ? $data['default_uptime'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lastdate'] = isset($data['lastdate']) ? $data['lastdate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_address_ip
     *
     * @return string
     */
    public function getDefaultAddressIp()
    {
        return $this->container['default_address_ip'];
    }

    /**
     * Sets default_address_ip
     *
     * @param string $default_address_ip default_address_ip
     *
     * @return $this
     */
    public function setDefaultAddressIp($default_address_ip)
    {
        $this->container['default_address_ip'] = $default_address_ip;

        return $this;
    }

    /**
     * Gets default_description
     *
     * @return string
     */
    public function getDefaultDescription()
    {
        return $this->container['default_description'];
    }

    /**
     * Sets default_description
     *
     * @param string $default_description default_description
     *
     * @return $this
     */
    public function setDefaultDescription($default_description)
    {
        $this->container['default_description'] = $default_description;

        return $this;
    }

    /**
     * Gets default_gateway
     *
     * @return string
     */
    public function getDefaultGateway()
    {
        return $this->container['default_gateway'];
    }

    /**
     * Sets default_gateway
     *
     * @param string $default_gateway default_gateway
     *
     * @return $this
     */
    public function setDefaultGateway($default_gateway)
    {
        $this->container['default_gateway'] = $default_gateway;

        return $this;
    }

    /**
     * Gets default_location
     *
     * @return string
     */
    public function getDefaultLocation()
    {
        return $this->container['default_location'];
    }

    /**
     * Sets default_location
     *
     * @param string $default_location default_location
     *
     * @return $this
     */
    public function setDefaultLocation($default_location)
    {
        $this->container['default_location'] = $default_location;

        return $this;
    }

    /**
     * Gets default_mac_address
     *
     * @return string
     */
    public function getDefaultMacAddress()
    {
        return $this->container['default_mac_address'];
    }

    /**
     * Sets default_mac_address
     *
     * @param string $default_mac_address default_mac_address
     *
     * @return $this
     */
    public function setDefaultMacAddress($default_mac_address)
    {
        $this->container['default_mac_address'] = $default_mac_address;

        return $this;
    }

    /**
     * Gets default_name
     *
     * @return string
     */
    public function getDefaultName()
    {
        return $this->container['default_name'];
    }

    /**
     * Sets default_name
     *
     * @param string $default_name default_name
     *
     * @return $this
     */
    public function setDefaultName($default_name)
    {
        $this->container['default_name'] = $default_name;

        return $this;
    }

    /**
     * Gets default_uptime
     *
     * @return string
     */
    public function getDefaultUptime()
    {
        return $this->container['default_uptime'];
    }

    /**
     * Sets default_uptime
     *
     * @param string $default_uptime default_uptime
     *
     * @return $this
     */
    public function setDefaultUptime($default_uptime)
    {
        $this->container['default_uptime'] = $default_uptime;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastdate
     *
     * @return \DateTime
     */
    public function getLastdate()
    {
        return $this->container['lastdate'];
    }

    /**
     * Sets lastdate
     *
     * @param \DateTime $lastdate lastdate
     *
     * @return $this
     */
    public function setLastdate($lastdate)
    {
        $this->container['lastdate'] = $lastdate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
