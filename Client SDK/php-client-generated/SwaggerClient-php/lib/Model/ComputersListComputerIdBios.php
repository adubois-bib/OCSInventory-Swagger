<?php
/**
 * ComputersListComputerIdBios
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OCS Inventory Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ComputersListComputerIdBios Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComputersListComputerIdBios implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'computersList_computer_id_bios';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assettag' => 'string',
        'bdate' => 'string',
        'bmanufacturer' => 'string',
        'bversion' => 'string',
        'hardware_id' => 'int',
        'mmanufacturer' => 'string',
        'mmodel' => 'string',
        'msn' => 'string',
        'smanufacturer' => 'string',
        'smodel' => 'string',
        'ssn' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assettag' => null,
        'bdate' => null,
        'bmanufacturer' => null,
        'bversion' => null,
        'hardware_id' => 'int32',
        'mmanufacturer' => null,
        'mmodel' => null,
        'msn' => null,
        'smanufacturer' => null,
        'smodel' => null,
        'ssn' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assettag' => 'ASSETTAG',
        'bdate' => 'BDATE',
        'bmanufacturer' => 'BMANUFACTURER',
        'bversion' => 'BVERSION',
        'hardware_id' => 'HARDWARE_ID',
        'mmanufacturer' => 'MMANUFACTURER',
        'mmodel' => 'MMODEL',
        'msn' => 'MSN',
        'smanufacturer' => 'SMANUFACTURER',
        'smodel' => 'SMODEL',
        'ssn' => 'SSN',
        'type' => 'TYPE'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assettag' => 'setAssettag',
        'bdate' => 'setBdate',
        'bmanufacturer' => 'setBmanufacturer',
        'bversion' => 'setBversion',
        'hardware_id' => 'setHardwareId',
        'mmanufacturer' => 'setMmanufacturer',
        'mmodel' => 'setMmodel',
        'msn' => 'setMsn',
        'smanufacturer' => 'setSmanufacturer',
        'smodel' => 'setSmodel',
        'ssn' => 'setSsn',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assettag' => 'getAssettag',
        'bdate' => 'getBdate',
        'bmanufacturer' => 'getBmanufacturer',
        'bversion' => 'getBversion',
        'hardware_id' => 'getHardwareId',
        'mmanufacturer' => 'getMmanufacturer',
        'mmodel' => 'getMmodel',
        'msn' => 'getMsn',
        'smanufacturer' => 'getSmanufacturer',
        'smodel' => 'getSmodel',
        'ssn' => 'getSsn',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assettag'] = isset($data['assettag']) ? $data['assettag'] : null;
        $this->container['bdate'] = isset($data['bdate']) ? $data['bdate'] : null;
        $this->container['bmanufacturer'] = isset($data['bmanufacturer']) ? $data['bmanufacturer'] : null;
        $this->container['bversion'] = isset($data['bversion']) ? $data['bversion'] : null;
        $this->container['hardware_id'] = isset($data['hardware_id']) ? $data['hardware_id'] : null;
        $this->container['mmanufacturer'] = isset($data['mmanufacturer']) ? $data['mmanufacturer'] : null;
        $this->container['mmodel'] = isset($data['mmodel']) ? $data['mmodel'] : null;
        $this->container['msn'] = isset($data['msn']) ? $data['msn'] : null;
        $this->container['smanufacturer'] = isset($data['smanufacturer']) ? $data['smanufacturer'] : null;
        $this->container['smodel'] = isset($data['smodel']) ? $data['smodel'] : null;
        $this->container['ssn'] = isset($data['ssn']) ? $data['ssn'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assettag
     *
     * @return string
     */
    public function getAssettag()
    {
        return $this->container['assettag'];
    }

    /**
     * Sets assettag
     *
     * @param string $assettag assettag
     *
     * @return $this
     */
    public function setAssettag($assettag)
    {
        $this->container['assettag'] = $assettag;

        return $this;
    }

    /**
     * Gets bdate
     *
     * @return string
     */
    public function getBdate()
    {
        return $this->container['bdate'];
    }

    /**
     * Sets bdate
     *
     * @param string $bdate bdate
     *
     * @return $this
     */
    public function setBdate($bdate)
    {
        $this->container['bdate'] = $bdate;

        return $this;
    }

    /**
     * Gets bmanufacturer
     *
     * @return string
     */
    public function getBmanufacturer()
    {
        return $this->container['bmanufacturer'];
    }

    /**
     * Sets bmanufacturer
     *
     * @param string $bmanufacturer bmanufacturer
     *
     * @return $this
     */
    public function setBmanufacturer($bmanufacturer)
    {
        $this->container['bmanufacturer'] = $bmanufacturer;

        return $this;
    }

    /**
     * Gets bversion
     *
     * @return string
     */
    public function getBversion()
    {
        return $this->container['bversion'];
    }

    /**
     * Sets bversion
     *
     * @param string $bversion bversion
     *
     * @return $this
     */
    public function setBversion($bversion)
    {
        $this->container['bversion'] = $bversion;

        return $this;
    }

    /**
     * Gets hardware_id
     *
     * @return int
     */
    public function getHardwareId()
    {
        return $this->container['hardware_id'];
    }

    /**
     * Sets hardware_id
     *
     * @param int $hardware_id hardware_id
     *
     * @return $this
     */
    public function setHardwareId($hardware_id)
    {
        $this->container['hardware_id'] = $hardware_id;

        return $this;
    }

    /**
     * Gets mmanufacturer
     *
     * @return string
     */
    public function getMmanufacturer()
    {
        return $this->container['mmanufacturer'];
    }

    /**
     * Sets mmanufacturer
     *
     * @param string $mmanufacturer mmanufacturer
     *
     * @return $this
     */
    public function setMmanufacturer($mmanufacturer)
    {
        $this->container['mmanufacturer'] = $mmanufacturer;

        return $this;
    }

    /**
     * Gets mmodel
     *
     * @return string
     */
    public function getMmodel()
    {
        return $this->container['mmodel'];
    }

    /**
     * Sets mmodel
     *
     * @param string $mmodel mmodel
     *
     * @return $this
     */
    public function setMmodel($mmodel)
    {
        $this->container['mmodel'] = $mmodel;

        return $this;
    }

    /**
     * Gets msn
     *
     * @return string
     */
    public function getMsn()
    {
        return $this->container['msn'];
    }

    /**
     * Sets msn
     *
     * @param string $msn msn
     *
     * @return $this
     */
    public function setMsn($msn)
    {
        $this->container['msn'] = $msn;

        return $this;
    }

    /**
     * Gets smanufacturer
     *
     * @return string
     */
    public function getSmanufacturer()
    {
        return $this->container['smanufacturer'];
    }

    /**
     * Sets smanufacturer
     *
     * @param string $smanufacturer smanufacturer
     *
     * @return $this
     */
    public function setSmanufacturer($smanufacturer)
    {
        $this->container['smanufacturer'] = $smanufacturer;

        return $this;
    }

    /**
     * Gets smodel
     *
     * @return string
     */
    public function getSmodel()
    {
        return $this->container['smodel'];
    }

    /**
     * Sets smodel
     *
     * @param string $smodel smodel
     *
     * @return $this
     */
    public function setSmodel($smodel)
    {
        $this->container['smodel'] = $smodel;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string $ssn ssn
     *
     * @return $this
     */
    public function setSsn($ssn)
    {
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
