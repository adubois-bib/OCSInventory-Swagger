/* 
 * OCS Inventory Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// IpdiscoverNetdevicesInner
    /// </summary>
    [DataContract]
        public partial class IpdiscoverNetdevicesInner :  IEquatable<IpdiscoverNetdevicesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpdiscoverNetdevicesInner" /> class.
        /// </summary>
        /// <param name="dATE">dATE.</param>
        /// <param name="hARDWAREID">hARDWAREID.</param>
        /// <param name="iP">iP.</param>
        /// <param name="mAC">mAC.</param>
        /// <param name="mASK">mASK.</param>
        /// <param name="nAME">nAME.</param>
        /// <param name="nETID">nETID.</param>
        /// <param name="tAG">tAG.</param>
        public IpdiscoverNetdevicesInner(DateTime? dATE = default(DateTime?), int? hARDWAREID = default(int?), string iP = default(string), string mAC = default(string), string mASK = default(string), string nAME = default(string), string nETID = default(string), string tAG = default(string))
        {
            this.DATE = dATE;
            this.HARDWARE_ID = hARDWAREID;
            this.IP = iP;
            this.MAC = mAC;
            this.MASK = mASK;
            this.NAME = nAME;
            this.NETID = nETID;
            this.TAG = tAG;
        }
        
        /// <summary>
        /// Gets or Sets DATE
        /// </summary>
        [DataMember(Name="DATE", EmitDefaultValue=false)]
        public DateTime? DATE { get; set; }

        /// <summary>
        /// Gets or Sets HARDWARE_ID
        /// </summary>
        [DataMember(Name="HARDWARE_ID", EmitDefaultValue=false)]
        public int? HARDWARE_ID { get; set; }

        /// <summary>
        /// Gets or Sets IP
        /// </summary>
        [DataMember(Name="IP", EmitDefaultValue=false)]
        public string IP { get; set; }

        /// <summary>
        /// Gets or Sets MAC
        /// </summary>
        [DataMember(Name="MAC", EmitDefaultValue=false)]
        public string MAC { get; set; }

        /// <summary>
        /// Gets or Sets MASK
        /// </summary>
        [DataMember(Name="MASK", EmitDefaultValue=false)]
        public string MASK { get; set; }

        /// <summary>
        /// Gets or Sets NAME
        /// </summary>
        [DataMember(Name="NAME", EmitDefaultValue=false)]
        public string NAME { get; set; }

        /// <summary>
        /// Gets or Sets NETID
        /// </summary>
        [DataMember(Name="NETID", EmitDefaultValue=false)]
        public string NETID { get; set; }

        /// <summary>
        /// Gets or Sets TAG
        /// </summary>
        [DataMember(Name="TAG", EmitDefaultValue=false)]
        public string TAG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpdiscoverNetdevicesInner {\n");
            sb.Append("  DATE: ").Append(DATE).Append("\n");
            sb.Append("  HARDWARE_ID: ").Append(HARDWARE_ID).Append("\n");
            sb.Append("  IP: ").Append(IP).Append("\n");
            sb.Append("  MAC: ").Append(MAC).Append("\n");
            sb.Append("  MASK: ").Append(MASK).Append("\n");
            sb.Append("  NAME: ").Append(NAME).Append("\n");
            sb.Append("  NETID: ").Append(NETID).Append("\n");
            sb.Append("  TAG: ").Append(TAG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IpdiscoverNetdevicesInner);
        }

        /// <summary>
        /// Returns true if IpdiscoverNetdevicesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of IpdiscoverNetdevicesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpdiscoverNetdevicesInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DATE == input.DATE ||
                    (this.DATE != null &&
                    this.DATE.Equals(input.DATE))
                ) && 
                (
                    this.HARDWARE_ID == input.HARDWARE_ID ||
                    (this.HARDWARE_ID != null &&
                    this.HARDWARE_ID.Equals(input.HARDWARE_ID))
                ) && 
                (
                    this.IP == input.IP ||
                    (this.IP != null &&
                    this.IP.Equals(input.IP))
                ) && 
                (
                    this.MAC == input.MAC ||
                    (this.MAC != null &&
                    this.MAC.Equals(input.MAC))
                ) && 
                (
                    this.MASK == input.MASK ||
                    (this.MASK != null &&
                    this.MASK.Equals(input.MASK))
                ) && 
                (
                    this.NAME == input.NAME ||
                    (this.NAME != null &&
                    this.NAME.Equals(input.NAME))
                ) && 
                (
                    this.NETID == input.NETID ||
                    (this.NETID != null &&
                    this.NETID.Equals(input.NETID))
                ) && 
                (
                    this.TAG == input.TAG ||
                    (this.TAG != null &&
                    this.TAG.Equals(input.TAG))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DATE != null)
                    hashCode = hashCode * 59 + this.DATE.GetHashCode();
                if (this.HARDWARE_ID != null)
                    hashCode = hashCode * 59 + this.HARDWARE_ID.GetHashCode();
                if (this.IP != null)
                    hashCode = hashCode * 59 + this.IP.GetHashCode();
                if (this.MAC != null)
                    hashCode = hashCode * 59 + this.MAC.GetHashCode();
                if (this.MASK != null)
                    hashCode = hashCode * 59 + this.MASK.GetHashCode();
                if (this.NAME != null)
                    hashCode = hashCode * 59 + this.NAME.GetHashCode();
                if (this.NETID != null)
                    hashCode = hashCode * 59 + this.NETID.GetHashCode();
                if (this.TAG != null)
                    hashCode = hashCode * 59 + this.TAG.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
