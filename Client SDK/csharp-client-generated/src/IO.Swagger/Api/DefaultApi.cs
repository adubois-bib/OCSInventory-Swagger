/* 
 * OCS Inventory Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a computer by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>ComputersList</returns>
        ComputersList ComputerIdGet (int? id);

        /// <summary>
        /// Get a computer by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>ApiResponse of ComputersList</returns>
        ApiResponse<ComputersList> ComputerIdGetWithHttpInfo (int? id);
        /// <summary>
        /// Get sections informations of a specific computer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>ComputerDetail</returns>
        ComputerDetail ComputerIdSectionsGet (int? id, string sections, string where = null, string _operator = null);

        /// <summary>
        /// Get sections informations of a specific computer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>ApiResponse of ComputerDetail</returns>
        ApiResponse<ComputerDetail> ComputerIdSectionsGetWithHttpInfo (int? id, string sections, string where = null, string _operator = null);
        /// <summary>
        /// Get a list of computers with its detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>List&lt;ComputersList&gt;</returns>
        List<ComputersList> ComputersGet (int? start = null, int? limit = null);

        /// <summary>
        /// Get a list of computers with its detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of List&lt;ComputersList&gt;</returns>
        ApiResponse<List<ComputersList>> ComputersGetWithHttpInfo (int? start = null, int? limit = null);
        /// <summary>
        /// Get a ID list of computers update during the provided timestamp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>List&lt;ListOfID&gt;</returns>
        List<ListOfID> ComputersLastupdateTimestampGet (int? timestamp);

        /// <summary>
        /// Get a ID list of computers update during the provided timestamp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>ApiResponse of List&lt;ListOfID&gt;</returns>
        ApiResponse<List<ListOfID>> ComputersLastupdateTimestampGetWithHttpInfo (int? timestamp);
        /// <summary>
        /// Get a ID list of all computers in the OCS database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>List&lt;ListOfID&gt;</returns>
        List<ListOfID> ComputersListIDGet (int? start = null, int? limit = null);

        /// <summary>
        /// Get a ID list of all computers in the OCS database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of List&lt;ListOfID&gt;</returns>
        ApiResponse<List<ListOfID>> ComputersListIDGetWithHttpInfo (int? start = null, int? limit = null);
        /// <summary>
        /// List IPDiscover network list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>IpdiscoverList</returns>
        IpdiscoverList IpdiscoverGet (int? start = null, int? limit = null);

        /// <summary>
        /// List IPDiscover network list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of IpdiscoverList</returns>
        ApiResponse<IpdiscoverList> IpdiscoverGetWithHttpInfo (int? start = null, int? limit = null);
        /// <summary>
        /// Get list of network devices scanned on one network
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>IpdiscoverNetdevices</returns>
        IpdiscoverNetdevices IpdiscoverNetworkNetidGet (int? netid);

        /// <summary>
        /// Get list of network devices scanned on one network
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>ApiResponse of IpdiscoverNetdevices</returns>
        ApiResponse<IpdiscoverNetdevices> IpdiscoverNetworkNetidGetWithHttpInfo (int? netid);
        /// <summary>
        /// Get snmp device list of a specific snmp type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>SNMPDetail</returns>
        SNMPDetail SnmpSnmpTypeGet (string snmpType, int? start = null, int? limit = null);

        /// <summary>
        /// Get snmp device list of a specific snmp type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of SNMPDetail</returns>
        ApiResponse<SNMPDetail> SnmpSnmpTypeGetWithHttpInfo (string snmpType, int? start = null, int? limit = null);
        /// <summary>
        /// Get a device from a snmp type with its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>SNMPDetail</returns>
        SNMPDetail SnmpSnmpTypeIdGet (string snmpType, int? id);

        /// <summary>
        /// Get a device from a snmp type with its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>ApiResponse of SNMPDetail</returns>
        ApiResponse<SNMPDetail> SnmpSnmpTypeIdGetWithHttpInfo (string snmpType, int? id);
        /// <summary>
        /// Get a SNMP type list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SNMPType</returns>
        SNMPType SnmpsTypeListGet ();

        /// <summary>
        /// Get a SNMP type list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SNMPType</returns>
        ApiResponse<SNMPType> SnmpsTypeListGetWithHttpInfo ();
        /// <summary>
        /// Get software list from database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>SoftwaresList</returns>
        SoftwaresList SoftwaresGet (int? start = null, int? limit = null, string soft = null);

        /// <summary>
        /// Get software list from database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>ApiResponse of SoftwaresList</returns>
        ApiResponse<SoftwaresList> SoftwaresGetWithHttpInfo (int? start = null, int? limit = null, string soft = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a computer by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>Task of ComputersList</returns>
        System.Threading.Tasks.Task<ComputersList> ComputerIdGetAsync (int? id);

        /// <summary>
        /// Get a computer by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>Task of ApiResponse (ComputersList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComputersList>> ComputerIdGetAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get sections informations of a specific computer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>Task of ComputerDetail</returns>
        System.Threading.Tasks.Task<ComputerDetail> ComputerIdSectionsGetAsync (int? id, string sections, string where = null, string _operator = null);

        /// <summary>
        /// Get sections informations of a specific computer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>Task of ApiResponse (ComputerDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComputerDetail>> ComputerIdSectionsGetAsyncWithHttpInfo (int? id, string sections, string where = null, string _operator = null);
        /// <summary>
        /// Get a list of computers with its detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of List&lt;ComputersList&gt;</returns>
        System.Threading.Tasks.Task<List<ComputersList>> ComputersGetAsync (int? start = null, int? limit = null);

        /// <summary>
        /// Get a list of computers with its detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ComputersList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ComputersList>>> ComputersGetAsyncWithHttpInfo (int? start = null, int? limit = null);
        /// <summary>
        /// Get a ID list of computers update during the provided timestamp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>Task of List&lt;ListOfID&gt;</returns>
        System.Threading.Tasks.Task<List<ListOfID>> ComputersLastupdateTimestampGetAsync (int? timestamp);

        /// <summary>
        /// Get a ID list of computers update during the provided timestamp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>Task of ApiResponse (List&lt;ListOfID&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ListOfID>>> ComputersLastupdateTimestampGetAsyncWithHttpInfo (int? timestamp);
        /// <summary>
        /// Get a ID list of all computers in the OCS database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of List&lt;ListOfID&gt;</returns>
        System.Threading.Tasks.Task<List<ListOfID>> ComputersListIDGetAsync (int? start = null, int? limit = null);

        /// <summary>
        /// Get a ID list of all computers in the OCS database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ListOfID&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ListOfID>>> ComputersListIDGetAsyncWithHttpInfo (int? start = null, int? limit = null);
        /// <summary>
        /// List IPDiscover network list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of IpdiscoverList</returns>
        System.Threading.Tasks.Task<IpdiscoverList> IpdiscoverGetAsync (int? start = null, int? limit = null);

        /// <summary>
        /// List IPDiscover network list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (IpdiscoverList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpdiscoverList>> IpdiscoverGetAsyncWithHttpInfo (int? start = null, int? limit = null);
        /// <summary>
        /// Get list of network devices scanned on one network
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>Task of IpdiscoverNetdevices</returns>
        System.Threading.Tasks.Task<IpdiscoverNetdevices> IpdiscoverNetworkNetidGetAsync (int? netid);

        /// <summary>
        /// Get list of network devices scanned on one network
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>Task of ApiResponse (IpdiscoverNetdevices)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpdiscoverNetdevices>> IpdiscoverNetworkNetidGetAsyncWithHttpInfo (int? netid);
        /// <summary>
        /// Get snmp device list of a specific snmp type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of SNMPDetail</returns>
        System.Threading.Tasks.Task<SNMPDetail> SnmpSnmpTypeGetAsync (string snmpType, int? start = null, int? limit = null);

        /// <summary>
        /// Get snmp device list of a specific snmp type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (SNMPDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SNMPDetail>> SnmpSnmpTypeGetAsyncWithHttpInfo (string snmpType, int? start = null, int? limit = null);
        /// <summary>
        /// Get a device from a snmp type with its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>Task of SNMPDetail</returns>
        System.Threading.Tasks.Task<SNMPDetail> SnmpSnmpTypeIdGetAsync (string snmpType, int? id);

        /// <summary>
        /// Get a device from a snmp type with its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>Task of ApiResponse (SNMPDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SNMPDetail>> SnmpSnmpTypeIdGetAsyncWithHttpInfo (string snmpType, int? id);
        /// <summary>
        /// Get a SNMP type list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SNMPType</returns>
        System.Threading.Tasks.Task<SNMPType> SnmpsTypeListGetAsync ();

        /// <summary>
        /// Get a SNMP type list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SNMPType)</returns>
        System.Threading.Tasks.Task<ApiResponse<SNMPType>> SnmpsTypeListGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get software list from database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>Task of SoftwaresList</returns>
        System.Threading.Tasks.Task<SoftwaresList> SoftwaresGetAsync (int? start = null, int? limit = null, string soft = null);

        /// <summary>
        /// Get software list from database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>Task of ApiResponse (SoftwaresList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwaresList>> SoftwaresGetAsyncWithHttpInfo (int? start = null, int? limit = null, string soft = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a computer by its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>ComputersList</returns>
        public ComputersList ComputerIdGet (int? id)
        {
             ApiResponse<ComputersList> localVarResponse = ComputerIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a computer by its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>ApiResponse of ComputersList</returns>
        public ApiResponse< ComputersList > ComputerIdGetWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ComputerIdGet");

            var localVarPath = "/computer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputerIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComputersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ComputersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComputersList)));
        }

        /// <summary>
        /// Get a computer by its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>Task of ComputersList</returns>
        public async System.Threading.Tasks.Task<ComputersList> ComputerIdGetAsync (int? id)
        {
             ApiResponse<ComputersList> localVarResponse = await ComputerIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a computer by its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <returns>Task of ApiResponse (ComputersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComputersList>> ComputerIdGetAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ComputerIdGet");

            var localVarPath = "/computer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputerIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComputersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ComputersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComputersList)));
        }

        /// <summary>
        /// Get sections informations of a specific computer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>ComputerDetail</returns>
        public ComputerDetail ComputerIdSectionsGet (int? id, string sections, string where = null, string _operator = null)
        {
             ApiResponse<ComputerDetail> localVarResponse = ComputerIdSectionsGetWithHttpInfo(id, sections, where, _operator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sections informations of a specific computer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>ApiResponse of ComputerDetail</returns>
        public ApiResponse< ComputerDetail > ComputerIdSectionsGetWithHttpInfo (int? id, string sections, string where = null, string _operator = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ComputerIdSectionsGet");
            // verify the required parameter 'sections' is set
            if (sections == null)
                throw new ApiException(400, "Missing required parameter 'sections' when calling DefaultApi->ComputerIdSectionsGet");

            var localVarPath = "/computer/{id}/{sections}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sections != null) localVarPathParams.Add("sections", this.Configuration.ApiClient.ParameterToString(sections)); // path parameter
            if (where != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "where", where)); // query parameter
            if (_operator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator", _operator)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputerIdSectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComputerDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ComputerDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComputerDetail)));
        }

        /// <summary>
        /// Get sections informations of a specific computer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>Task of ComputerDetail</returns>
        public async System.Threading.Tasks.Task<ComputerDetail> ComputerIdSectionsGetAsync (int? id, string sections, string where = null, string _operator = null)
        {
             ApiResponse<ComputerDetail> localVarResponse = await ComputerIdSectionsGetAsyncWithHttpInfo(id, sections, where, _operator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sections informations of a specific computer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the computer in OCS database</param>
        /// <param name="sections">Name of the requested section (i.e -&gt; bios, software, etc..)</param>
        /// <param name="where">Search on a specific column of the specific section. (optional)</param>
        /// <param name="_operator">Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set. (optional)</param>
        /// <returns>Task of ApiResponse (ComputerDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComputerDetail>> ComputerIdSectionsGetAsyncWithHttpInfo (int? id, string sections, string where = null, string _operator = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ComputerIdSectionsGet");
            // verify the required parameter 'sections' is set
            if (sections == null)
                throw new ApiException(400, "Missing required parameter 'sections' when calling DefaultApi->ComputerIdSectionsGet");

            var localVarPath = "/computer/{id}/{sections}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sections != null) localVarPathParams.Add("sections", this.Configuration.ApiClient.ParameterToString(sections)); // path parameter
            if (where != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "where", where)); // query parameter
            if (_operator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator", _operator)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputerIdSectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComputerDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ComputerDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComputerDetail)));
        }

        /// <summary>
        /// Get a list of computers with its detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>List&lt;ComputersList&gt;</returns>
        public List<ComputersList> ComputersGet (int? start = null, int? limit = null)
        {
             ApiResponse<List<ComputersList>> localVarResponse = ComputersGetWithHttpInfo(start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of computers with its detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of List&lt;ComputersList&gt;</returns>
        public ApiResponse< List<ComputersList> > ComputersGetWithHttpInfo (int? start = null, int? limit = null)
        {

            var localVarPath = "/computers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ComputersList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ComputersList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ComputersList>)));
        }

        /// <summary>
        /// Get a list of computers with its detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of List&lt;ComputersList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ComputersList>> ComputersGetAsync (int? start = null, int? limit = null)
        {
             ApiResponse<List<ComputersList>> localVarResponse = await ComputersGetAsyncWithHttpInfo(start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of computers with its detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ComputersList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ComputersList>>> ComputersGetAsyncWithHttpInfo (int? start = null, int? limit = null)
        {

            var localVarPath = "/computers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ComputersList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ComputersList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ComputersList>)));
        }

        /// <summary>
        /// Get a ID list of computers update during the provided timestamp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>List&lt;ListOfID&gt;</returns>
        public List<ListOfID> ComputersLastupdateTimestampGet (int? timestamp)
        {
             ApiResponse<List<ListOfID>> localVarResponse = ComputersLastupdateTimestampGetWithHttpInfo(timestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a ID list of computers update during the provided timestamp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>ApiResponse of List&lt;ListOfID&gt;</returns>
        public ApiResponse< List<ListOfID> > ComputersLastupdateTimestampGetWithHttpInfo (int? timestamp)
        {
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling DefaultApi->ComputersLastupdateTimestampGet");

            var localVarPath = "/computers/lastupdate/{timestamp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timestamp != null) localVarPathParams.Add("timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputersLastupdateTimestampGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ListOfID>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ListOfID>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ListOfID>)));
        }

        /// <summary>
        /// Get a ID list of computers update during the provided timestamp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>Task of List&lt;ListOfID&gt;</returns>
        public async System.Threading.Tasks.Task<List<ListOfID>> ComputersLastupdateTimestampGetAsync (int? timestamp)
        {
             ApiResponse<List<ListOfID>> localVarResponse = await ComputersLastupdateTimestampGetAsyncWithHttpInfo(timestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a ID list of computers update during the provided timestamp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp">Timestamp of the number of days to count down from the current date. Optional.</param>
        /// <returns>Task of ApiResponse (List&lt;ListOfID&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ListOfID>>> ComputersLastupdateTimestampGetAsyncWithHttpInfo (int? timestamp)
        {
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling DefaultApi->ComputersLastupdateTimestampGet");

            var localVarPath = "/computers/lastupdate/{timestamp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timestamp != null) localVarPathParams.Add("timestamp", this.Configuration.ApiClient.ParameterToString(timestamp)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputersLastupdateTimestampGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ListOfID>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ListOfID>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ListOfID>)));
        }

        /// <summary>
        /// Get a ID list of all computers in the OCS database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>List&lt;ListOfID&gt;</returns>
        public List<ListOfID> ComputersListIDGet (int? start = null, int? limit = null)
        {
             ApiResponse<List<ListOfID>> localVarResponse = ComputersListIDGetWithHttpInfo(start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a ID list of all computers in the OCS database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of List&lt;ListOfID&gt;</returns>
        public ApiResponse< List<ListOfID> > ComputersListIDGetWithHttpInfo (int? start = null, int? limit = null)
        {

            var localVarPath = "/computers/listID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputersListIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ListOfID>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ListOfID>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ListOfID>)));
        }

        /// <summary>
        /// Get a ID list of all computers in the OCS database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of List&lt;ListOfID&gt;</returns>
        public async System.Threading.Tasks.Task<List<ListOfID>> ComputersListIDGetAsync (int? start = null, int? limit = null)
        {
             ApiResponse<List<ListOfID>> localVarResponse = await ComputersListIDGetAsyncWithHttpInfo(start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a ID list of all computers in the OCS database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ListOfID&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ListOfID>>> ComputersListIDGetAsyncWithHttpInfo (int? start = null, int? limit = null)
        {

            var localVarPath = "/computers/listID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComputersListIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ListOfID>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ListOfID>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ListOfID>)));
        }

        /// <summary>
        /// List IPDiscover network list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>IpdiscoverList</returns>
        public IpdiscoverList IpdiscoverGet (int? start = null, int? limit = null)
        {
             ApiResponse<IpdiscoverList> localVarResponse = IpdiscoverGetWithHttpInfo(start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List IPDiscover network list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of IpdiscoverList</returns>
        public ApiResponse< IpdiscoverList > IpdiscoverGetWithHttpInfo (int? start = null, int? limit = null)
        {

            var localVarPath = "/ipdiscover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IpdiscoverGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpdiscoverList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IpdiscoverList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpdiscoverList)));
        }

        /// <summary>
        /// List IPDiscover network list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of IpdiscoverList</returns>
        public async System.Threading.Tasks.Task<IpdiscoverList> IpdiscoverGetAsync (int? start = null, int? limit = null)
        {
             ApiResponse<IpdiscoverList> localVarResponse = await IpdiscoverGetAsyncWithHttpInfo(start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List IPDiscover network list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (IpdiscoverList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IpdiscoverList>> IpdiscoverGetAsyncWithHttpInfo (int? start = null, int? limit = null)
        {

            var localVarPath = "/ipdiscover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IpdiscoverGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpdiscoverList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IpdiscoverList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpdiscoverList)));
        }

        /// <summary>
        /// Get list of network devices scanned on one network 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>IpdiscoverNetdevices</returns>
        public IpdiscoverNetdevices IpdiscoverNetworkNetidGet (int? netid)
        {
             ApiResponse<IpdiscoverNetdevices> localVarResponse = IpdiscoverNetworkNetidGetWithHttpInfo(netid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of network devices scanned on one network 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>ApiResponse of IpdiscoverNetdevices</returns>
        public ApiResponse< IpdiscoverNetdevices > IpdiscoverNetworkNetidGetWithHttpInfo (int? netid)
        {
            // verify the required parameter 'netid' is set
            if (netid == null)
                throw new ApiException(400, "Missing required parameter 'netid' when calling DefaultApi->IpdiscoverNetworkNetidGet");

            var localVarPath = "/ipdiscover/network/{netid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (netid != null) localVarPathParams.Add("netid", this.Configuration.ApiClient.ParameterToString(netid)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IpdiscoverNetworkNetidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpdiscoverNetdevices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IpdiscoverNetdevices) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpdiscoverNetdevices)));
        }

        /// <summary>
        /// Get list of network devices scanned on one network 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>Task of IpdiscoverNetdevices</returns>
        public async System.Threading.Tasks.Task<IpdiscoverNetdevices> IpdiscoverNetworkNetidGetAsync (int? netid)
        {
             ApiResponse<IpdiscoverNetdevices> localVarResponse = await IpdiscoverNetworkNetidGetAsyncWithHttpInfo(netid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of network devices scanned on one network 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netid">Start offset of the query</param>
        /// <returns>Task of ApiResponse (IpdiscoverNetdevices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IpdiscoverNetdevices>> IpdiscoverNetworkNetidGetAsyncWithHttpInfo (int? netid)
        {
            // verify the required parameter 'netid' is set
            if (netid == null)
                throw new ApiException(400, "Missing required parameter 'netid' when calling DefaultApi->IpdiscoverNetworkNetidGet");

            var localVarPath = "/ipdiscover/network/{netid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (netid != null) localVarPathParams.Add("netid", this.Configuration.ApiClient.ParameterToString(netid)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IpdiscoverNetworkNetidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpdiscoverNetdevices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IpdiscoverNetdevices) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpdiscoverNetdevices)));
        }

        /// <summary>
        /// Get snmp device list of a specific snmp type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>SNMPDetail</returns>
        public SNMPDetail SnmpSnmpTypeGet (string snmpType, int? start = null, int? limit = null)
        {
             ApiResponse<SNMPDetail> localVarResponse = SnmpSnmpTypeGetWithHttpInfo(snmpType, start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get snmp device list of a specific snmp type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>ApiResponse of SNMPDetail</returns>
        public ApiResponse< SNMPDetail > SnmpSnmpTypeGetWithHttpInfo (string snmpType, int? start = null, int? limit = null)
        {
            // verify the required parameter 'snmpType' is set
            if (snmpType == null)
                throw new ApiException(400, "Missing required parameter 'snmpType' when calling DefaultApi->SnmpSnmpTypeGet");

            var localVarPath = "/snmp/{snmp_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snmpType != null) localVarPathParams.Add("snmp_type", this.Configuration.ApiClient.ParameterToString(snmpType)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnmpSnmpTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SNMPDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SNMPDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SNMPDetail)));
        }

        /// <summary>
        /// Get snmp device list of a specific snmp type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of SNMPDetail</returns>
        public async System.Threading.Tasks.Task<SNMPDetail> SnmpSnmpTypeGetAsync (string snmpType, int? start = null, int? limit = null)
        {
             ApiResponse<SNMPDetail> localVarResponse = await SnmpSnmpTypeGetAsyncWithHttpInfo(snmpType, start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get snmp device list of a specific snmp type 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <returns>Task of ApiResponse (SNMPDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SNMPDetail>> SnmpSnmpTypeGetAsyncWithHttpInfo (string snmpType, int? start = null, int? limit = null)
        {
            // verify the required parameter 'snmpType' is set
            if (snmpType == null)
                throw new ApiException(400, "Missing required parameter 'snmpType' when calling DefaultApi->SnmpSnmpTypeGet");

            var localVarPath = "/snmp/{snmp_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snmpType != null) localVarPathParams.Add("snmp_type", this.Configuration.ApiClient.ParameterToString(snmpType)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnmpSnmpTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SNMPDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SNMPDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SNMPDetail)));
        }

        /// <summary>
        /// Get a device from a snmp type with its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>SNMPDetail</returns>
        public SNMPDetail SnmpSnmpTypeIdGet (string snmpType, int? id)
        {
             ApiResponse<SNMPDetail> localVarResponse = SnmpSnmpTypeIdGetWithHttpInfo(snmpType, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a device from a snmp type with its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>ApiResponse of SNMPDetail</returns>
        public ApiResponse< SNMPDetail > SnmpSnmpTypeIdGetWithHttpInfo (string snmpType, int? id)
        {
            // verify the required parameter 'snmpType' is set
            if (snmpType == null)
                throw new ApiException(400, "Missing required parameter 'snmpType' when calling DefaultApi->SnmpSnmpTypeIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->SnmpSnmpTypeIdGet");

            var localVarPath = "/snmp/{snmp_type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snmpType != null) localVarPathParams.Add("snmp_type", this.Configuration.ApiClient.ParameterToString(snmpType)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnmpSnmpTypeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SNMPDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SNMPDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SNMPDetail)));
        }

        /// <summary>
        /// Get a device from a snmp type with its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>Task of SNMPDetail</returns>
        public async System.Threading.Tasks.Task<SNMPDetail> SnmpSnmpTypeIdGetAsync (string snmpType, int? id)
        {
             ApiResponse<SNMPDetail> localVarResponse = await SnmpSnmpTypeIdGetAsyncWithHttpInfo(snmpType, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a device from a snmp type with its ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snmpType">Name of the snmp type you want to list</param>
        /// <param name="id">Identifiant en base de données de l&#x27;équipement</param>
        /// <returns>Task of ApiResponse (SNMPDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SNMPDetail>> SnmpSnmpTypeIdGetAsyncWithHttpInfo (string snmpType, int? id)
        {
            // verify the required parameter 'snmpType' is set
            if (snmpType == null)
                throw new ApiException(400, "Missing required parameter 'snmpType' when calling DefaultApi->SnmpSnmpTypeIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->SnmpSnmpTypeIdGet");

            var localVarPath = "/snmp/{snmp_type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snmpType != null) localVarPathParams.Add("snmp_type", this.Configuration.ApiClient.ParameterToString(snmpType)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnmpSnmpTypeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SNMPDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SNMPDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SNMPDetail)));
        }

        /// <summary>
        /// Get a SNMP type list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SNMPType</returns>
        public SNMPType SnmpsTypeListGet ()
        {
             ApiResponse<SNMPType> localVarResponse = SnmpsTypeListGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a SNMP type list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SNMPType</returns>
        public ApiResponse< SNMPType > SnmpsTypeListGetWithHttpInfo ()
        {

            var localVarPath = "/snmps/typeList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnmpsTypeListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SNMPType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SNMPType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SNMPType)));
        }

        /// <summary>
        /// Get a SNMP type list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SNMPType</returns>
        public async System.Threading.Tasks.Task<SNMPType> SnmpsTypeListGetAsync ()
        {
             ApiResponse<SNMPType> localVarResponse = await SnmpsTypeListGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a SNMP type list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SNMPType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SNMPType>> SnmpsTypeListGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/snmps/typeList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnmpsTypeListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SNMPType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SNMPType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SNMPType)));
        }

        /// <summary>
        /// Get software list from database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>SoftwaresList</returns>
        public SoftwaresList SoftwaresGet (int? start = null, int? limit = null, string soft = null)
        {
             ApiResponse<SoftwaresList> localVarResponse = SoftwaresGetWithHttpInfo(start, limit, soft);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get software list from database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>ApiResponse of SoftwaresList</returns>
        public ApiResponse< SoftwaresList > SoftwaresGetWithHttpInfo (int? start = null, int? limit = null, string soft = null)
        {

            var localVarPath = "/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (soft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "soft", soft)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwaresGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwaresList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwaresList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwaresList)));
        }

        /// <summary>
        /// Get software list from database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>Task of SoftwaresList</returns>
        public async System.Threading.Tasks.Task<SoftwaresList> SoftwaresGetAsync (int? start = null, int? limit = null, string soft = null)
        {
             ApiResponse<SoftwaresList> localVarResponse = await SoftwaresGetAsyncWithHttpInfo(start, limit, soft);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get software list from database 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start offset of the query (optional)</param>
        /// <param name="limit">Limit offset of the query (optional)</param>
        /// <param name="soft">Name of the software you want to search (optional) (optional)</param>
        /// <returns>Task of ApiResponse (SoftwaresList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwaresList>> SoftwaresGetAsyncWithHttpInfo (int? start = null, int? limit = null, string soft = null)
        {

            var localVarPath = "/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (soft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "soft", soft)); // query parameter
            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwaresGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwaresList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwaresList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwaresList)));
        }

    }
}
