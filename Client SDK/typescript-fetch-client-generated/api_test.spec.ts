/**
 * OCS Inventory Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("computerIdGet", () => {
    const id: number = 56
    return expect(instance.computerIdGet(id, {})).resolves.toBe(null)
  })
  test("computerIdSectionsGet", () => {
    const id: number = 56
    const sections: string = "sections_example"
    const where: string = "where_example"
    const operator: string = "operator_example"
    return expect(instance.computerIdSectionsGet(id, sections, where, operator, {})).resolves.toBe(null)
  })
  test("computersGet", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.computersGet(start, limit, {})).resolves.toBe(null)
  })
  test("computersLastupdateTimestampGet", () => {
    const timestamp: number = 56
    return expect(instance.computersLastupdateTimestampGet(timestamp, {})).resolves.toBe(null)
  })
  test("computersListIDGet", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.computersListIDGet(start, limit, {})).resolves.toBe(null)
  })
  test("ipdiscoverGet", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.ipdiscoverGet(start, limit, {})).resolves.toBe(null)
  })
  test("ipdiscoverNetworkNetidGet", () => {
    const netid: number = 56
    return expect(instance.ipdiscoverNetworkNetidGet(netid, {})).resolves.toBe(null)
  })
  test("snmpSnmpTypeGet", () => {
    const snmpType: string = "snmpType_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.snmpSnmpTypeGet(snmpType, start, limit, {})).resolves.toBe(null)
  })
  test("snmpSnmpTypeIdGet", () => {
    const snmpType: string = "snmpType_example"
    const id: number = 56
    return expect(instance.snmpSnmpTypeIdGet(snmpType, id, {})).resolves.toBe(null)
  })
  test("snmpsTypeListGet", () => {
    return expect(instance.snmpsTypeListGet({})).resolves.toBe(null)
  })
  test("softwaresGet", () => {
    const start: number = 56
    const limit: number = 56
    const soft: string = "soft_example"
    return expect(instance.softwaresGet(start, limit, soft, {})).resolves.toBe(null)
  })
})

