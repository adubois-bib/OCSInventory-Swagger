/*
 * OCS Inventory Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OcsInventoryRestApi);
  }
}(this, function(expect, OcsInventoryRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OcsInventoryRestApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('computerIdGet', function() {
        it('should call computerIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for computerIdGet call and complete the assertions
          /*

          instance.computerIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.ComputersList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('computerIdSectionsGet', function() {
        it('should call computerIdSectionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for computerIdSectionsGet call and complete the assertions
          /*
          var opts = {};

          instance.computerIdSectionsGet(id, sections, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.ComputerDetail);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('computersGet', function() {
        it('should call computersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for computersGet call and complete the assertions
          /*
          var opts = {};

          instance.computersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OcsInventoryRestApi.ComputersList);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('computersLastupdateTimestampGet', function() {
        it('should call computersLastupdateTimestampGet successfully', function(done) {
          // TODO: uncomment, update parameter values for computersLastupdateTimestampGet call and complete the assertions
          /*

          instance.computersLastupdateTimestampGet(timestamp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OcsInventoryRestApi.ListOfID);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('computersListIDGet', function() {
        it('should call computersListIDGet successfully', function(done) {
          // TODO: uncomment, update parameter values for computersListIDGet call and complete the assertions
          /*
          var opts = {};

          instance.computersListIDGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OcsInventoryRestApi.ListOfID);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ipdiscoverGet', function() {
        it('should call ipdiscoverGet successfully', function(done) {
          // TODO: uncomment, update parameter values for ipdiscoverGet call and complete the assertions
          /*
          var opts = {};

          instance.ipdiscoverGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.IpdiscoverList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ipdiscoverNetworkNetidGet', function() {
        it('should call ipdiscoverNetworkNetidGet successfully', function(done) {
          // TODO: uncomment, update parameter values for ipdiscoverNetworkNetidGet call and complete the assertions
          /*

          instance.ipdiscoverNetworkNetidGet(netid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.IpdiscoverNetdevices);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('snmpSnmpTypeGet', function() {
        it('should call snmpSnmpTypeGet successfully', function(done) {
          // TODO: uncomment, update parameter values for snmpSnmpTypeGet call and complete the assertions
          /*
          var opts = {};

          instance.snmpSnmpTypeGet(snmpType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.SNMPDetail);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('snmpSnmpTypeIdGet', function() {
        it('should call snmpSnmpTypeIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for snmpSnmpTypeIdGet call and complete the assertions
          /*

          instance.snmpSnmpTypeIdGet(snmpType, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.SNMPDetail);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('snmpsTypeListGet', function() {
        it('should call snmpsTypeListGet successfully', function(done) {
          // TODO: uncomment snmpsTypeListGet call and complete the assertions
          /*

          instance.snmpsTypeListGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.SNMPType);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('softwaresGet', function() {
        it('should call softwaresGet successfully', function(done) {
          // TODO: uncomment, update parameter values for softwaresGet call and complete the assertions
          /*
          var opts = {};

          instance.softwaresGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OcsInventoryRestApi.SoftwaresList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
