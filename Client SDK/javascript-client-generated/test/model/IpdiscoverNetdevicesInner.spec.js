/*
 * OCS Inventory Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OcsInventoryRestApi);
  }
}(this, function(expect, OcsInventoryRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('IpdiscoverNetdevicesInner', function() {
      beforeEach(function() {
        instance = new OcsInventoryRestApi.IpdiscoverNetdevicesInner();
      });

      it('should create an instance of IpdiscoverNetdevicesInner', function() {
        // TODO: update the code to test IpdiscoverNetdevicesInner
        expect(instance).to.be.a(OcsInventoryRestApi.IpdiscoverNetdevicesInner);
      });

      it('should have the property DATE (base name: "DATE")', function() {
        // TODO: update the code to test the property DATE
        expect(instance).to.have.property('DATE');
        // expect(instance.DATE).to.be(expectedValueLiteral);
      });

      it('should have the property HARDWARE_ID (base name: "HARDWARE_ID")', function() {
        // TODO: update the code to test the property HARDWARE_ID
        expect(instance).to.have.property('HARDWARE_ID');
        // expect(instance.HARDWARE_ID).to.be(expectedValueLiteral);
      });

      it('should have the property IP (base name: "IP")', function() {
        // TODO: update the code to test the property IP
        expect(instance).to.have.property('IP');
        // expect(instance.IP).to.be(expectedValueLiteral);
      });

      it('should have the property MAC (base name: "MAC")', function() {
        // TODO: update the code to test the property MAC
        expect(instance).to.have.property('MAC');
        // expect(instance.MAC).to.be(expectedValueLiteral);
      });

      it('should have the property MASK (base name: "MASK")', function() {
        // TODO: update the code to test the property MASK
        expect(instance).to.have.property('MASK');
        // expect(instance.MASK).to.be(expectedValueLiteral);
      });

      it('should have the property NAME (base name: "NAME")', function() {
        // TODO: update the code to test the property NAME
        expect(instance).to.have.property('NAME');
        // expect(instance.NAME).to.be(expectedValueLiteral);
      });

      it('should have the property NETID (base name: "NETID")', function() {
        // TODO: update the code to test the property NETID
        expect(instance).to.have.property('NETID');
        // expect(instance.NETID).to.be(expectedValueLiteral);
      });

      it('should have the property TAG (base name: "TAG")', function() {
        // TODO: update the code to test the property TAG
        expect(instance).to.have.property('TAG');
        // expect(instance.TAG).to.be(expectedValueLiteral);
      });

    });
  });

}));
