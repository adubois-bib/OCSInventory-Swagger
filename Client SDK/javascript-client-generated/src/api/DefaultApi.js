/*
 * OCS Inventory Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ComputerDetail} from '../model/ComputerDetail';
import {ComputersList} from '../model/ComputersList';
import {IpdiscoverList} from '../model/IpdiscoverList';
import {IpdiscoverNetdevices} from '../model/IpdiscoverNetdevices';
import {ListOfID} from '../model/ListOfID';
import {SNMPDetail} from '../model/SNMPDetail';
import {SNMPType} from '../model/SNMPType';
import {SoftwaresList} from '../model/SoftwaresList';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the computerIdGet operation.
     * @callback moduleapi/DefaultApi~computerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputersList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a computer by its ID
     * @param {Number} id ID of the computer in OCS database
     * @param {module:api/DefaultApi~computerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computerIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling computerIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputersList;

      return this.apiClient.callApi(
        '/computer/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the computerIdSectionsGet operation.
     * @callback moduleapi/DefaultApi~computerIdSectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputerDetail{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sections informations of a specific computer
     * @param {Number} id ID of the computer in OCS database
     * @param {String} sections Name of the requested section (i.e -&gt; bios, software, etc..)
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Search on a specific column of the specific section.
     * @param {String} opts.operator Search operator (like, not like, &#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;). Mandatory if where parameter is set.
     * @param {module:api/DefaultApi~computerIdSectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computerIdSectionsGet(id, sections, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling computerIdSectionsGet");
      }
      // verify the required parameter 'sections' is set
      if (sections === undefined || sections === null) {
        throw new Error("Missing the required parameter 'sections' when calling computerIdSectionsGet");
      }

      let pathParams = {
        'id': id,'sections': sections
      };
      let queryParams = {
        'where': opts['where'],'operator': opts['operator']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputerDetail;

      return this.apiClient.callApi(
        '/computer/{id}/{sections}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the computersGet operation.
     * @callback moduleapi/DefaultApi~computersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ComputersList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of computers with its detail
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start offset of the query
     * @param {Number} opts.limit Limit offset of the query
     * @param {module:api/DefaultApi~computersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'start': opts['start'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ComputersList];

      return this.apiClient.callApi(
        '/computers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the computersLastupdateTimestampGet operation.
     * @callback moduleapi/DefaultApi~computersLastupdateTimestampGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListOfID>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a ID list of computers update during the provided timestamp
     * @param {Number} timestamp Timestamp of the number of days to count down from the current date. Optional.
     * @param {module:api/DefaultApi~computersLastupdateTimestampGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computersLastupdateTimestampGet(timestamp, callback) {
      
      let postBody = null;
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling computersLastupdateTimestampGet");
      }

      let pathParams = {
        'timestamp': timestamp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListOfID];

      return this.apiClient.callApi(
        '/computers/lastupdate/{timestamp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the computersListIDGet operation.
     * @callback moduleapi/DefaultApi~computersListIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListOfID>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a ID list of all computers in the OCS database
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start offset of the query
     * @param {Number} opts.limit Limit offset of the query
     * @param {module:api/DefaultApi~computersListIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computersListIDGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'start': opts['start'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListOfID];

      return this.apiClient.callApi(
        '/computers/listID', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ipdiscoverGet operation.
     * @callback moduleapi/DefaultApi~ipdiscoverGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpdiscoverList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List IPDiscover network list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start offset of the query
     * @param {Number} opts.limit Limit offset of the query
     * @param {module:api/DefaultApi~ipdiscoverGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    ipdiscoverGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'start': opts['start'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpdiscoverList;

      return this.apiClient.callApi(
        '/ipdiscover', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ipdiscoverNetworkNetidGet operation.
     * @callback moduleapi/DefaultApi~ipdiscoverNetworkNetidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpdiscoverNetdevices{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of network devices scanned on one network
     * @param {Number} netid Start offset of the query
     * @param {module:api/DefaultApi~ipdiscoverNetworkNetidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    ipdiscoverNetworkNetidGet(netid, callback) {
      
      let postBody = null;
      // verify the required parameter 'netid' is set
      if (netid === undefined || netid === null) {
        throw new Error("Missing the required parameter 'netid' when calling ipdiscoverNetworkNetidGet");
      }

      let pathParams = {
        'netid': netid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpdiscoverNetdevices;

      return this.apiClient.callApi(
        '/ipdiscover/network/{netid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the snmpSnmpTypeGet operation.
     * @callback moduleapi/DefaultApi~snmpSnmpTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPDetail{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get snmp device list of a specific snmp type
     * @param {String} snmpType Name of the snmp type you want to list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start offset of the query
     * @param {Number} opts.limit Limit offset of the query
     * @param {module:api/DefaultApi~snmpSnmpTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    snmpSnmpTypeGet(snmpType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snmpType' is set
      if (snmpType === undefined || snmpType === null) {
        throw new Error("Missing the required parameter 'snmpType' when calling snmpSnmpTypeGet");
      }

      let pathParams = {
        'snmp_type': snmpType
      };
      let queryParams = {
        'start': opts['start'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPDetail;

      return this.apiClient.callApi(
        '/snmp/{snmp_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the snmpSnmpTypeIdGet operation.
     * @callback moduleapi/DefaultApi~snmpSnmpTypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPDetail{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a device from a snmp type with its ID
     * @param {String} snmpType Name of the snmp type you want to list
     * @param {Number} id Identifiant en base de données de l&#x27;équipement
     * @param {module:api/DefaultApi~snmpSnmpTypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    snmpSnmpTypeIdGet(snmpType, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'snmpType' is set
      if (snmpType === undefined || snmpType === null) {
        throw new Error("Missing the required parameter 'snmpType' when calling snmpSnmpTypeIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling snmpSnmpTypeIdGet");
      }

      let pathParams = {
        'snmp_type': snmpType,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPDetail;

      return this.apiClient.callApi(
        '/snmp/{snmp_type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the snmpsTypeListGet operation.
     * @callback moduleapi/DefaultApi~snmpsTypeListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPType{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a SNMP type list
     * @param {module:api/DefaultApi~snmpsTypeListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    snmpsTypeListGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPType;

      return this.apiClient.callApi(
        '/snmps/typeList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the softwaresGet operation.
     * @callback moduleapi/DefaultApi~softwaresGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwaresList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get software list from database
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start offset of the query
     * @param {Number} opts.limit Limit offset of the query
     * @param {String} opts.soft Name of the software you want to search (optional)
     * @param {module:api/DefaultApi~softwaresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    softwaresGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'start': opts['start'],'limit': opts['limit'],'soft': opts['soft']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SoftwaresList;

      return this.apiClient.callApi(
        '/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}